// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "doCorner.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int doCorner::C_S_AXI_DATA_WIDTH = "100000";
const int doCorner::C_S_AXI_WSTRB_WIDTH = "100";
const int doCorner::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic doCorner::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<24> doCorner::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<3> doCorner::ap_const_lv3_0 = "000";
const sc_lv<1> doCorner::ap_const_lv1_0 = "0";
const sc_logic doCorner::ap_const_logic_0 = sc_dt::Log_0;

doCorner::doCorner(sc_module_name name) : sc_module(name), mVcdFile(0) {
    doCorner_CTRL_BUS_s_axi_U = new doCorner_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("doCorner_CTRL_BUS_s_axi_U");
    doCorner_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    doCorner_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    doCorner_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    doCorner_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    doCorner_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    doCorner_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    doCorner_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    doCorner_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    doCorner_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    doCorner_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    doCorner_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    doCorner_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    doCorner_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    doCorner_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    doCorner_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    doCorner_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    doCorner_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    doCorner_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    doCorner_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    doCorner_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    doCorner_CTRL_BUS_s_axi_U->ap_start(ap_start);
    doCorner_CTRL_BUS_s_axi_U->interrupt(interrupt);
    doCorner_CTRL_BUS_s_axi_U->ap_ready(ap_ready);
    doCorner_CTRL_BUS_s_axi_U->ap_done(ap_done);
    doCorner_CTRL_BUS_s_axi_U->ap_idle(ap_idle);
    AXIvideo2Mat_U0 = new AXIvideo2Mat("AXIvideo2Mat_U0");
    AXIvideo2Mat_U0->ap_clk(ap_clk);
    AXIvideo2Mat_U0->ap_rst(ap_rst_n_inv);
    AXIvideo2Mat_U0->ap_start(AXIvideo2Mat_U0_ap_start);
    AXIvideo2Mat_U0->start_full_n(start_for_rgb2gray_U0_full_n);
    AXIvideo2Mat_U0->ap_done(AXIvideo2Mat_U0_ap_done);
    AXIvideo2Mat_U0->ap_continue(AXIvideo2Mat_U0_ap_continue);
    AXIvideo2Mat_U0->ap_idle(AXIvideo2Mat_U0_ap_idle);
    AXIvideo2Mat_U0->ap_ready(AXIvideo2Mat_U0_ap_ready);
    AXIvideo2Mat_U0->start_out(AXIvideo2Mat_U0_start_out);
    AXIvideo2Mat_U0->start_write(AXIvideo2Mat_U0_start_write);
    AXIvideo2Mat_U0->inStream_TDATA(inStream_TDATA);
    AXIvideo2Mat_U0->inStream_TVALID(inStream_TVALID);
    AXIvideo2Mat_U0->inStream_TREADY(AXIvideo2Mat_U0_inStream_TREADY);
    AXIvideo2Mat_U0->inStream_TKEEP(inStream_TKEEP);
    AXIvideo2Mat_U0->inStream_TSTRB(inStream_TSTRB);
    AXIvideo2Mat_U0->inStream_TUSER(inStream_TUSER);
    AXIvideo2Mat_U0->inStream_TLAST(inStream_TLAST);
    AXIvideo2Mat_U0->inStream_TID(inStream_TID);
    AXIvideo2Mat_U0->inStream_TDEST(inStream_TDEST);
    AXIvideo2Mat_U0->img_data_stream_0_V_din(AXIvideo2Mat_U0_img_data_stream_0_V_din);
    AXIvideo2Mat_U0->img_data_stream_0_V_full_n(img_0_data_stream_0_full_n);
    AXIvideo2Mat_U0->img_data_stream_0_V_write(AXIvideo2Mat_U0_img_data_stream_0_V_write);
    AXIvideo2Mat_U0->img_data_stream_1_V_din(AXIvideo2Mat_U0_img_data_stream_1_V_din);
    AXIvideo2Mat_U0->img_data_stream_1_V_full_n(img_0_data_stream_1_full_n);
    AXIvideo2Mat_U0->img_data_stream_1_V_write(AXIvideo2Mat_U0_img_data_stream_1_V_write);
    AXIvideo2Mat_U0->img_data_stream_2_V_din(AXIvideo2Mat_U0_img_data_stream_2_V_din);
    AXIvideo2Mat_U0->img_data_stream_2_V_full_n(img_0_data_stream_2_full_n);
    AXIvideo2Mat_U0->img_data_stream_2_V_write(AXIvideo2Mat_U0_img_data_stream_2_V_write);
    rgb2gray_U0 = new rgb2gray("rgb2gray_U0");
    rgb2gray_U0->ap_clk(ap_clk);
    rgb2gray_U0->ap_rst(ap_rst_n_inv);
    rgb2gray_U0->ap_start(rgb2gray_U0_ap_start);
    rgb2gray_U0->start_full_n(rgb2gray_U0_start_full_n);
    rgb2gray_U0->ap_done(rgb2gray_U0_ap_done);
    rgb2gray_U0->ap_continue(rgb2gray_U0_ap_continue);
    rgb2gray_U0->ap_idle(rgb2gray_U0_ap_idle);
    rgb2gray_U0->ap_ready(rgb2gray_U0_ap_ready);
    rgb2gray_U0->start_out(rgb2gray_U0_start_out);
    rgb2gray_U0->start_write(rgb2gray_U0_start_write);
    rgb2gray_U0->imgIn_data_stream_0_V_dout(img_0_data_stream_0_dout);
    rgb2gray_U0->imgIn_data_stream_0_V_empty_n(img_0_data_stream_0_empty_n);
    rgb2gray_U0->imgIn_data_stream_0_V_read(rgb2gray_U0_imgIn_data_stream_0_V_read);
    rgb2gray_U0->imgIn_data_stream_1_V_dout(img_0_data_stream_1_dout);
    rgb2gray_U0->imgIn_data_stream_1_V_empty_n(img_0_data_stream_1_empty_n);
    rgb2gray_U0->imgIn_data_stream_1_V_read(rgb2gray_U0_imgIn_data_stream_1_V_read);
    rgb2gray_U0->imgIn_data_stream_2_V_dout(img_0_data_stream_2_dout);
    rgb2gray_U0->imgIn_data_stream_2_V_empty_n(img_0_data_stream_2_empty_n);
    rgb2gray_U0->imgIn_data_stream_2_V_read(rgb2gray_U0_imgIn_data_stream_2_V_read);
    rgb2gray_U0->imgOut_3C_data_stream_0_V_din(rgb2gray_U0_imgOut_3C_data_stream_0_V_din);
    rgb2gray_U0->imgOut_3C_data_stream_0_V_full_n(img_1_data_stream_0_full_n);
    rgb2gray_U0->imgOut_3C_data_stream_0_V_write(rgb2gray_U0_imgOut_3C_data_stream_0_V_write);
    rgb2gray_U0->imgOut_3C_data_stream_1_V_din(rgb2gray_U0_imgOut_3C_data_stream_1_V_din);
    rgb2gray_U0->imgOut_3C_data_stream_1_V_full_n(img_1_data_stream_1_full_n);
    rgb2gray_U0->imgOut_3C_data_stream_1_V_write(rgb2gray_U0_imgOut_3C_data_stream_1_V_write);
    rgb2gray_U0->imgOut_3C_data_stream_2_V_din(rgb2gray_U0_imgOut_3C_data_stream_2_V_din);
    rgb2gray_U0->imgOut_3C_data_stream_2_V_full_n(img_1_data_stream_2_full_n);
    rgb2gray_U0->imgOut_3C_data_stream_2_V_write(rgb2gray_U0_imgOut_3C_data_stream_2_V_write);
    rgb2gray_U0->imgOut_1C_data_stream_V_din(rgb2gray_U0_imgOut_1C_data_stream_V_din);
    rgb2gray_U0->imgOut_1C_data_stream_V_full_n(img_2_data_stream_0_full_n);
    rgb2gray_U0->imgOut_1C_data_stream_V_write(rgb2gray_U0_imgOut_1C_data_stream_V_write);
    FAST_t_opr_U0 = new FAST_t_opr("FAST_t_opr_U0");
    FAST_t_opr_U0->ap_clk(ap_clk);
    FAST_t_opr_U0->ap_rst(ap_rst_n_inv);
    FAST_t_opr_U0->ap_start(FAST_t_opr_U0_ap_start);
    FAST_t_opr_U0->start_full_n(start_for_Dilate_U0_full_n);
    FAST_t_opr_U0->ap_done(FAST_t_opr_U0_ap_done);
    FAST_t_opr_U0->ap_continue(FAST_t_opr_U0_ap_continue);
    FAST_t_opr_U0->ap_idle(FAST_t_opr_U0_ap_idle);
    FAST_t_opr_U0->ap_ready(FAST_t_opr_U0_ap_ready);
    FAST_t_opr_U0->start_out(FAST_t_opr_U0_start_out);
    FAST_t_opr_U0->start_write(FAST_t_opr_U0_start_write);
    FAST_t_opr_U0->p_src_data_stream_V_dout(img_2_data_stream_0_dout);
    FAST_t_opr_U0->p_src_data_stream_V_empty_n(img_2_data_stream_0_empty_n);
    FAST_t_opr_U0->p_src_data_stream_V_read(FAST_t_opr_U0_p_src_data_stream_V_read);
    FAST_t_opr_U0->p_mask_data_stream_V_din(FAST_t_opr_U0_p_mask_data_stream_V_din);
    FAST_t_opr_U0->p_mask_data_stream_V_full_n(mask_data_stream_0_s_full_n);
    FAST_t_opr_U0->p_mask_data_stream_V_write(FAST_t_opr_U0_p_mask_data_stream_V_write);
    Dilate_U0 = new Dilate("Dilate_U0");
    Dilate_U0->ap_clk(ap_clk);
    Dilate_U0->ap_rst(ap_rst_n_inv);
    Dilate_U0->ap_start(Dilate_U0_ap_start);
    Dilate_U0->ap_done(Dilate_U0_ap_done);
    Dilate_U0->ap_continue(Dilate_U0_ap_continue);
    Dilate_U0->ap_idle(Dilate_U0_ap_idle);
    Dilate_U0->ap_ready(Dilate_U0_ap_ready);
    Dilate_U0->p_src_data_stream_V_dout(mask_data_stream_0_s_dout);
    Dilate_U0->p_src_data_stream_V_empty_n(mask_data_stream_0_s_empty_n);
    Dilate_U0->p_src_data_stream_V_read(Dilate_U0_p_src_data_stream_V_read);
    Dilate_U0->p_dst_data_stream_V_din(Dilate_U0_p_dst_data_stream_V_din);
    Dilate_U0->p_dst_data_stream_V_full_n(dmask_data_stream_0_full_n);
    Dilate_U0->p_dst_data_stream_V_write(Dilate_U0_p_dst_data_stream_V_write);
    PaintMask_U0 = new PaintMask("PaintMask_U0");
    PaintMask_U0->ap_clk(ap_clk);
    PaintMask_U0->ap_rst(ap_rst_n_inv);
    PaintMask_U0->ap_start(PaintMask_U0_ap_start);
    PaintMask_U0->start_full_n(start_for_Mat2AXIvideo_U0_full_n);
    PaintMask_U0->ap_done(PaintMask_U0_ap_done);
    PaintMask_U0->ap_continue(PaintMask_U0_ap_continue);
    PaintMask_U0->ap_idle(PaintMask_U0_ap_idle);
    PaintMask_U0->ap_ready(PaintMask_U0_ap_ready);
    PaintMask_U0->start_out(PaintMask_U0_start_out);
    PaintMask_U0->start_write(PaintMask_U0_start_write);
    PaintMask_U0->p_src_data_stream_0_V_dout(img_1_data_stream_0_dout);
    PaintMask_U0->p_src_data_stream_0_V_empty_n(img_1_data_stream_0_empty_n);
    PaintMask_U0->p_src_data_stream_0_V_read(PaintMask_U0_p_src_data_stream_0_V_read);
    PaintMask_U0->p_src_data_stream_1_V_dout(img_1_data_stream_1_dout);
    PaintMask_U0->p_src_data_stream_1_V_empty_n(img_1_data_stream_1_empty_n);
    PaintMask_U0->p_src_data_stream_1_V_read(PaintMask_U0_p_src_data_stream_1_V_read);
    PaintMask_U0->p_src_data_stream_2_V_dout(img_1_data_stream_2_dout);
    PaintMask_U0->p_src_data_stream_2_V_empty_n(img_1_data_stream_2_empty_n);
    PaintMask_U0->p_src_data_stream_2_V_read(PaintMask_U0_p_src_data_stream_2_V_read);
    PaintMask_U0->p_mask_data_stream_V_dout(dmask_data_stream_0_dout);
    PaintMask_U0->p_mask_data_stream_V_empty_n(dmask_data_stream_0_empty_n);
    PaintMask_U0->p_mask_data_stream_V_read(PaintMask_U0_p_mask_data_stream_V_read);
    PaintMask_U0->p_dst_data_stream_0_V_din(PaintMask_U0_p_dst_data_stream_0_V_din);
    PaintMask_U0->p_dst_data_stream_0_V_full_n(img_3_data_stream_0_full_n);
    PaintMask_U0->p_dst_data_stream_0_V_write(PaintMask_U0_p_dst_data_stream_0_V_write);
    PaintMask_U0->p_dst_data_stream_1_V_din(PaintMask_U0_p_dst_data_stream_1_V_din);
    PaintMask_U0->p_dst_data_stream_1_V_full_n(img_3_data_stream_1_full_n);
    PaintMask_U0->p_dst_data_stream_1_V_write(PaintMask_U0_p_dst_data_stream_1_V_write);
    PaintMask_U0->p_dst_data_stream_2_V_din(PaintMask_U0_p_dst_data_stream_2_V_din);
    PaintMask_U0->p_dst_data_stream_2_V_full_n(img_3_data_stream_2_full_n);
    PaintMask_U0->p_dst_data_stream_2_V_write(PaintMask_U0_p_dst_data_stream_2_V_write);
    Mat2AXIvideo_U0 = new Mat2AXIvideo("Mat2AXIvideo_U0");
    Mat2AXIvideo_U0->ap_clk(ap_clk);
    Mat2AXIvideo_U0->ap_rst(ap_rst_n_inv);
    Mat2AXIvideo_U0->ap_start(Mat2AXIvideo_U0_ap_start);
    Mat2AXIvideo_U0->ap_done(Mat2AXIvideo_U0_ap_done);
    Mat2AXIvideo_U0->ap_continue(Mat2AXIvideo_U0_ap_continue);
    Mat2AXIvideo_U0->ap_idle(Mat2AXIvideo_U0_ap_idle);
    Mat2AXIvideo_U0->ap_ready(Mat2AXIvideo_U0_ap_ready);
    Mat2AXIvideo_U0->img_data_stream_0_V_dout(img_3_data_stream_0_dout);
    Mat2AXIvideo_U0->img_data_stream_0_V_empty_n(img_3_data_stream_0_empty_n);
    Mat2AXIvideo_U0->img_data_stream_0_V_read(Mat2AXIvideo_U0_img_data_stream_0_V_read);
    Mat2AXIvideo_U0->img_data_stream_1_V_dout(img_3_data_stream_1_dout);
    Mat2AXIvideo_U0->img_data_stream_1_V_empty_n(img_3_data_stream_1_empty_n);
    Mat2AXIvideo_U0->img_data_stream_1_V_read(Mat2AXIvideo_U0_img_data_stream_1_V_read);
    Mat2AXIvideo_U0->img_data_stream_2_V_dout(img_3_data_stream_2_dout);
    Mat2AXIvideo_U0->img_data_stream_2_V_empty_n(img_3_data_stream_2_empty_n);
    Mat2AXIvideo_U0->img_data_stream_2_V_read(Mat2AXIvideo_U0_img_data_stream_2_V_read);
    Mat2AXIvideo_U0->outStream_TDATA(Mat2AXIvideo_U0_outStream_TDATA);
    Mat2AXIvideo_U0->outStream_TVALID(Mat2AXIvideo_U0_outStream_TVALID);
    Mat2AXIvideo_U0->outStream_TREADY(outStream_TREADY);
    Mat2AXIvideo_U0->outStream_TKEEP(Mat2AXIvideo_U0_outStream_TKEEP);
    Mat2AXIvideo_U0->outStream_TSTRB(Mat2AXIvideo_U0_outStream_TSTRB);
    Mat2AXIvideo_U0->outStream_TUSER(Mat2AXIvideo_U0_outStream_TUSER);
    Mat2AXIvideo_U0->outStream_TLAST(Mat2AXIvideo_U0_outStream_TLAST);
    Mat2AXIvideo_U0->outStream_TID(Mat2AXIvideo_U0_outStream_TID);
    Mat2AXIvideo_U0->outStream_TDEST(Mat2AXIvideo_U0_outStream_TDEST);
    img_0_data_stream_0_U = new fifo_w8_d2_A("img_0_data_stream_0_U");
    img_0_data_stream_0_U->clk(ap_clk);
    img_0_data_stream_0_U->reset(ap_rst_n_inv);
    img_0_data_stream_0_U->if_read_ce(ap_var_for_const0);
    img_0_data_stream_0_U->if_write_ce(ap_var_for_const0);
    img_0_data_stream_0_U->if_din(AXIvideo2Mat_U0_img_data_stream_0_V_din);
    img_0_data_stream_0_U->if_full_n(img_0_data_stream_0_full_n);
    img_0_data_stream_0_U->if_write(AXIvideo2Mat_U0_img_data_stream_0_V_write);
    img_0_data_stream_0_U->if_dout(img_0_data_stream_0_dout);
    img_0_data_stream_0_U->if_empty_n(img_0_data_stream_0_empty_n);
    img_0_data_stream_0_U->if_read(rgb2gray_U0_imgIn_data_stream_0_V_read);
    img_0_data_stream_1_U = new fifo_w8_d2_A("img_0_data_stream_1_U");
    img_0_data_stream_1_U->clk(ap_clk);
    img_0_data_stream_1_U->reset(ap_rst_n_inv);
    img_0_data_stream_1_U->if_read_ce(ap_var_for_const0);
    img_0_data_stream_1_U->if_write_ce(ap_var_for_const0);
    img_0_data_stream_1_U->if_din(AXIvideo2Mat_U0_img_data_stream_1_V_din);
    img_0_data_stream_1_U->if_full_n(img_0_data_stream_1_full_n);
    img_0_data_stream_1_U->if_write(AXIvideo2Mat_U0_img_data_stream_1_V_write);
    img_0_data_stream_1_U->if_dout(img_0_data_stream_1_dout);
    img_0_data_stream_1_U->if_empty_n(img_0_data_stream_1_empty_n);
    img_0_data_stream_1_U->if_read(rgb2gray_U0_imgIn_data_stream_1_V_read);
    img_0_data_stream_2_U = new fifo_w8_d2_A("img_0_data_stream_2_U");
    img_0_data_stream_2_U->clk(ap_clk);
    img_0_data_stream_2_U->reset(ap_rst_n_inv);
    img_0_data_stream_2_U->if_read_ce(ap_var_for_const0);
    img_0_data_stream_2_U->if_write_ce(ap_var_for_const0);
    img_0_data_stream_2_U->if_din(AXIvideo2Mat_U0_img_data_stream_2_V_din);
    img_0_data_stream_2_U->if_full_n(img_0_data_stream_2_full_n);
    img_0_data_stream_2_U->if_write(AXIvideo2Mat_U0_img_data_stream_2_V_write);
    img_0_data_stream_2_U->if_dout(img_0_data_stream_2_dout);
    img_0_data_stream_2_U->if_empty_n(img_0_data_stream_2_empty_n);
    img_0_data_stream_2_U->if_read(rgb2gray_U0_imgIn_data_stream_2_V_read);
    img_1_data_stream_0_U = new fifo_w8_d20000_A("img_1_data_stream_0_U");
    img_1_data_stream_0_U->clk(ap_clk);
    img_1_data_stream_0_U->reset(ap_rst_n_inv);
    img_1_data_stream_0_U->if_read_ce(ap_var_for_const0);
    img_1_data_stream_0_U->if_write_ce(ap_var_for_const0);
    img_1_data_stream_0_U->if_din(rgb2gray_U0_imgOut_3C_data_stream_0_V_din);
    img_1_data_stream_0_U->if_full_n(img_1_data_stream_0_full_n);
    img_1_data_stream_0_U->if_write(rgb2gray_U0_imgOut_3C_data_stream_0_V_write);
    img_1_data_stream_0_U->if_dout(img_1_data_stream_0_dout);
    img_1_data_stream_0_U->if_empty_n(img_1_data_stream_0_empty_n);
    img_1_data_stream_0_U->if_read(PaintMask_U0_p_src_data_stream_0_V_read);
    img_1_data_stream_1_U = new fifo_w8_d20000_A("img_1_data_stream_1_U");
    img_1_data_stream_1_U->clk(ap_clk);
    img_1_data_stream_1_U->reset(ap_rst_n_inv);
    img_1_data_stream_1_U->if_read_ce(ap_var_for_const0);
    img_1_data_stream_1_U->if_write_ce(ap_var_for_const0);
    img_1_data_stream_1_U->if_din(rgb2gray_U0_imgOut_3C_data_stream_1_V_din);
    img_1_data_stream_1_U->if_full_n(img_1_data_stream_1_full_n);
    img_1_data_stream_1_U->if_write(rgb2gray_U0_imgOut_3C_data_stream_1_V_write);
    img_1_data_stream_1_U->if_dout(img_1_data_stream_1_dout);
    img_1_data_stream_1_U->if_empty_n(img_1_data_stream_1_empty_n);
    img_1_data_stream_1_U->if_read(PaintMask_U0_p_src_data_stream_1_V_read);
    img_1_data_stream_2_U = new fifo_w8_d20000_A("img_1_data_stream_2_U");
    img_1_data_stream_2_U->clk(ap_clk);
    img_1_data_stream_2_U->reset(ap_rst_n_inv);
    img_1_data_stream_2_U->if_read_ce(ap_var_for_const0);
    img_1_data_stream_2_U->if_write_ce(ap_var_for_const0);
    img_1_data_stream_2_U->if_din(rgb2gray_U0_imgOut_3C_data_stream_2_V_din);
    img_1_data_stream_2_U->if_full_n(img_1_data_stream_2_full_n);
    img_1_data_stream_2_U->if_write(rgb2gray_U0_imgOut_3C_data_stream_2_V_write);
    img_1_data_stream_2_U->if_dout(img_1_data_stream_2_dout);
    img_1_data_stream_2_U->if_empty_n(img_1_data_stream_2_empty_n);
    img_1_data_stream_2_U->if_read(PaintMask_U0_p_src_data_stream_2_V_read);
    img_2_data_stream_0_U = new fifo_w8_d2_A("img_2_data_stream_0_U");
    img_2_data_stream_0_U->clk(ap_clk);
    img_2_data_stream_0_U->reset(ap_rst_n_inv);
    img_2_data_stream_0_U->if_read_ce(ap_var_for_const0);
    img_2_data_stream_0_U->if_write_ce(ap_var_for_const0);
    img_2_data_stream_0_U->if_din(rgb2gray_U0_imgOut_1C_data_stream_V_din);
    img_2_data_stream_0_U->if_full_n(img_2_data_stream_0_full_n);
    img_2_data_stream_0_U->if_write(rgb2gray_U0_imgOut_1C_data_stream_V_write);
    img_2_data_stream_0_U->if_dout(img_2_data_stream_0_dout);
    img_2_data_stream_0_U->if_empty_n(img_2_data_stream_0_empty_n);
    img_2_data_stream_0_U->if_read(FAST_t_opr_U0_p_src_data_stream_V_read);
    mask_data_stream_0_s_U = new fifo_w8_d2_A("mask_data_stream_0_s_U");
    mask_data_stream_0_s_U->clk(ap_clk);
    mask_data_stream_0_s_U->reset(ap_rst_n_inv);
    mask_data_stream_0_s_U->if_read_ce(ap_var_for_const0);
    mask_data_stream_0_s_U->if_write_ce(ap_var_for_const0);
    mask_data_stream_0_s_U->if_din(FAST_t_opr_U0_p_mask_data_stream_V_din);
    mask_data_stream_0_s_U->if_full_n(mask_data_stream_0_s_full_n);
    mask_data_stream_0_s_U->if_write(FAST_t_opr_U0_p_mask_data_stream_V_write);
    mask_data_stream_0_s_U->if_dout(mask_data_stream_0_s_dout);
    mask_data_stream_0_s_U->if_empty_n(mask_data_stream_0_s_empty_n);
    mask_data_stream_0_s_U->if_read(Dilate_U0_p_src_data_stream_V_read);
    dmask_data_stream_0_U = new fifo_w8_d2_A("dmask_data_stream_0_U");
    dmask_data_stream_0_U->clk(ap_clk);
    dmask_data_stream_0_U->reset(ap_rst_n_inv);
    dmask_data_stream_0_U->if_read_ce(ap_var_for_const0);
    dmask_data_stream_0_U->if_write_ce(ap_var_for_const0);
    dmask_data_stream_0_U->if_din(Dilate_U0_p_dst_data_stream_V_din);
    dmask_data_stream_0_U->if_full_n(dmask_data_stream_0_full_n);
    dmask_data_stream_0_U->if_write(Dilate_U0_p_dst_data_stream_V_write);
    dmask_data_stream_0_U->if_dout(dmask_data_stream_0_dout);
    dmask_data_stream_0_U->if_empty_n(dmask_data_stream_0_empty_n);
    dmask_data_stream_0_U->if_read(PaintMask_U0_p_mask_data_stream_V_read);
    img_3_data_stream_0_U = new fifo_w8_d2_A("img_3_data_stream_0_U");
    img_3_data_stream_0_U->clk(ap_clk);
    img_3_data_stream_0_U->reset(ap_rst_n_inv);
    img_3_data_stream_0_U->if_read_ce(ap_var_for_const0);
    img_3_data_stream_0_U->if_write_ce(ap_var_for_const0);
    img_3_data_stream_0_U->if_din(PaintMask_U0_p_dst_data_stream_0_V_din);
    img_3_data_stream_0_U->if_full_n(img_3_data_stream_0_full_n);
    img_3_data_stream_0_U->if_write(PaintMask_U0_p_dst_data_stream_0_V_write);
    img_3_data_stream_0_U->if_dout(img_3_data_stream_0_dout);
    img_3_data_stream_0_U->if_empty_n(img_3_data_stream_0_empty_n);
    img_3_data_stream_0_U->if_read(Mat2AXIvideo_U0_img_data_stream_0_V_read);
    img_3_data_stream_1_U = new fifo_w8_d2_A("img_3_data_stream_1_U");
    img_3_data_stream_1_U->clk(ap_clk);
    img_3_data_stream_1_U->reset(ap_rst_n_inv);
    img_3_data_stream_1_U->if_read_ce(ap_var_for_const0);
    img_3_data_stream_1_U->if_write_ce(ap_var_for_const0);
    img_3_data_stream_1_U->if_din(PaintMask_U0_p_dst_data_stream_1_V_din);
    img_3_data_stream_1_U->if_full_n(img_3_data_stream_1_full_n);
    img_3_data_stream_1_U->if_write(PaintMask_U0_p_dst_data_stream_1_V_write);
    img_3_data_stream_1_U->if_dout(img_3_data_stream_1_dout);
    img_3_data_stream_1_U->if_empty_n(img_3_data_stream_1_empty_n);
    img_3_data_stream_1_U->if_read(Mat2AXIvideo_U0_img_data_stream_1_V_read);
    img_3_data_stream_2_U = new fifo_w8_d2_A("img_3_data_stream_2_U");
    img_3_data_stream_2_U->clk(ap_clk);
    img_3_data_stream_2_U->reset(ap_rst_n_inv);
    img_3_data_stream_2_U->if_read_ce(ap_var_for_const0);
    img_3_data_stream_2_U->if_write_ce(ap_var_for_const0);
    img_3_data_stream_2_U->if_din(PaintMask_U0_p_dst_data_stream_2_V_din);
    img_3_data_stream_2_U->if_full_n(img_3_data_stream_2_full_n);
    img_3_data_stream_2_U->if_write(PaintMask_U0_p_dst_data_stream_2_V_write);
    img_3_data_stream_2_U->if_dout(img_3_data_stream_2_dout);
    img_3_data_stream_2_U->if_empty_n(img_3_data_stream_2_empty_n);
    img_3_data_stream_2_U->if_read(Mat2AXIvideo_U0_img_data_stream_2_V_read);
    start_for_rgb2grapcA_U = new start_for_rgb2grapcA("start_for_rgb2grapcA_U");
    start_for_rgb2grapcA_U->clk(ap_clk);
    start_for_rgb2grapcA_U->reset(ap_rst_n_inv);
    start_for_rgb2grapcA_U->if_read_ce(ap_var_for_const0);
    start_for_rgb2grapcA_U->if_write_ce(ap_var_for_const0);
    start_for_rgb2grapcA_U->if_din(start_for_rgb2gray_U0_din);
    start_for_rgb2grapcA_U->if_full_n(start_for_rgb2gray_U0_full_n);
    start_for_rgb2grapcA_U->if_write(AXIvideo2Mat_U0_start_write);
    start_for_rgb2grapcA_U->if_dout(start_for_rgb2gray_U0_dout);
    start_for_rgb2grapcA_U->if_empty_n(start_for_rgb2gray_U0_empty_n);
    start_for_rgb2grapcA_U->if_read(rgb2gray_U0_ap_ready);
    start_for_FAST_t_qcK_U = new start_for_FAST_t_qcK("start_for_FAST_t_qcK_U");
    start_for_FAST_t_qcK_U->clk(ap_clk);
    start_for_FAST_t_qcK_U->reset(ap_rst_n_inv);
    start_for_FAST_t_qcK_U->if_read_ce(ap_var_for_const0);
    start_for_FAST_t_qcK_U->if_write_ce(ap_var_for_const0);
    start_for_FAST_t_qcK_U->if_din(start_for_FAST_t_opr_U0_din);
    start_for_FAST_t_qcK_U->if_full_n(start_for_FAST_t_opr_U0_full_n);
    start_for_FAST_t_qcK_U->if_write(rgb2gray_U0_start_write);
    start_for_FAST_t_qcK_U->if_dout(start_for_FAST_t_opr_U0_dout);
    start_for_FAST_t_qcK_U->if_empty_n(start_for_FAST_t_opr_U0_empty_n);
    start_for_FAST_t_qcK_U->if_read(FAST_t_opr_U0_ap_ready);
    start_for_PaintMarcU_U = new start_for_PaintMarcU("start_for_PaintMarcU_U");
    start_for_PaintMarcU_U->clk(ap_clk);
    start_for_PaintMarcU_U->reset(ap_rst_n_inv);
    start_for_PaintMarcU_U->if_read_ce(ap_var_for_const0);
    start_for_PaintMarcU_U->if_write_ce(ap_var_for_const0);
    start_for_PaintMarcU_U->if_din(start_for_PaintMask_U0_din);
    start_for_PaintMarcU_U->if_full_n(start_for_PaintMask_U0_full_n);
    start_for_PaintMarcU_U->if_write(rgb2gray_U0_start_write);
    start_for_PaintMarcU_U->if_dout(start_for_PaintMask_U0_dout);
    start_for_PaintMarcU_U->if_empty_n(start_for_PaintMask_U0_empty_n);
    start_for_PaintMarcU_U->if_read(PaintMask_U0_ap_ready);
    start_for_Dilate_U0_U = new start_for_Dilate_U0("start_for_Dilate_U0_U");
    start_for_Dilate_U0_U->clk(ap_clk);
    start_for_Dilate_U0_U->reset(ap_rst_n_inv);
    start_for_Dilate_U0_U->if_read_ce(ap_var_for_const0);
    start_for_Dilate_U0_U->if_write_ce(ap_var_for_const0);
    start_for_Dilate_U0_U->if_din(start_for_Dilate_U0_din);
    start_for_Dilate_U0_U->if_full_n(start_for_Dilate_U0_full_n);
    start_for_Dilate_U0_U->if_write(FAST_t_opr_U0_start_write);
    start_for_Dilate_U0_U->if_dout(start_for_Dilate_U0_dout);
    start_for_Dilate_U0_U->if_empty_n(start_for_Dilate_U0_empty_n);
    start_for_Dilate_U0_U->if_read(Dilate_U0_ap_ready);
    start_for_Mat2AXIsc4_U = new start_for_Mat2AXIsc4("start_for_Mat2AXIsc4_U");
    start_for_Mat2AXIsc4_U->clk(ap_clk);
    start_for_Mat2AXIsc4_U->reset(ap_rst_n_inv);
    start_for_Mat2AXIsc4_U->if_read_ce(ap_var_for_const0);
    start_for_Mat2AXIsc4_U->if_write_ce(ap_var_for_const0);
    start_for_Mat2AXIsc4_U->if_din(start_for_Mat2AXIvideo_U0_din);
    start_for_Mat2AXIsc4_U->if_full_n(start_for_Mat2AXIvideo_U0_full_n);
    start_for_Mat2AXIsc4_U->if_write(PaintMask_U0_start_write);
    start_for_Mat2AXIsc4_U->if_dout(start_for_Mat2AXIvideo_U0_dout);
    start_for_Mat2AXIsc4_U->if_empty_n(start_for_Mat2AXIvideo_U0_empty_n);
    start_for_Mat2AXIsc4_U->if_read(Mat2AXIvideo_U0_ap_ready);

    SC_METHOD(thread_AXIvideo2Mat_U0_ap_continue);

    SC_METHOD(thread_AXIvideo2Mat_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_Dilate_U0_ap_continue);

    SC_METHOD(thread_Dilate_U0_ap_start);
    sensitive << ( start_for_Dilate_U0_empty_n );

    SC_METHOD(thread_Dilate_U0_start_full_n);

    SC_METHOD(thread_Dilate_U0_start_write);

    SC_METHOD(thread_FAST_t_opr_U0_ap_continue);

    SC_METHOD(thread_FAST_t_opr_U0_ap_start);
    sensitive << ( start_for_FAST_t_opr_U0_empty_n );

    SC_METHOD(thread_Mat2AXIvideo_U0_ap_continue);

    SC_METHOD(thread_Mat2AXIvideo_U0_ap_start);
    sensitive << ( start_for_Mat2AXIvideo_U0_empty_n );

    SC_METHOD(thread_Mat2AXIvideo_U0_start_full_n);

    SC_METHOD(thread_Mat2AXIvideo_U0_start_write);

    SC_METHOD(thread_PaintMask_U0_ap_continue);

    SC_METHOD(thread_PaintMask_U0_ap_start);
    sensitive << ( start_for_PaintMask_U0_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( Mat2AXIvideo_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( AXIvideo2Mat_U0_ap_idle );
    sensitive << ( rgb2gray_U0_ap_idle );
    sensitive << ( FAST_t_opr_U0_ap_idle );
    sensitive << ( Dilate_U0_ap_idle );
    sensitive << ( PaintMask_U0_ap_idle );
    sensitive << ( Mat2AXIvideo_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( AXIvideo2Mat_U0_ap_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Mat2AXIvideo_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( AXIvideo2Mat_U0_ap_ready );

    SC_METHOD(thread_inStream_TREADY);
    sensitive << ( AXIvideo2Mat_U0_inStream_TREADY );

    SC_METHOD(thread_outStream_TDATA);
    sensitive << ( Mat2AXIvideo_U0_outStream_TDATA );

    SC_METHOD(thread_outStream_TDEST);
    sensitive << ( Mat2AXIvideo_U0_outStream_TDEST );

    SC_METHOD(thread_outStream_TID);
    sensitive << ( Mat2AXIvideo_U0_outStream_TID );

    SC_METHOD(thread_outStream_TKEEP);
    sensitive << ( Mat2AXIvideo_U0_outStream_TKEEP );

    SC_METHOD(thread_outStream_TLAST);
    sensitive << ( Mat2AXIvideo_U0_outStream_TLAST );

    SC_METHOD(thread_outStream_TSTRB);
    sensitive << ( Mat2AXIvideo_U0_outStream_TSTRB );

    SC_METHOD(thread_outStream_TUSER);
    sensitive << ( Mat2AXIvideo_U0_outStream_TUSER );

    SC_METHOD(thread_outStream_TVALID);
    sensitive << ( Mat2AXIvideo_U0_outStream_TVALID );

    SC_METHOD(thread_rgb2gray_U0_ap_continue);

    SC_METHOD(thread_rgb2gray_U0_ap_start);
    sensitive << ( start_for_rgb2gray_U0_empty_n );

    SC_METHOD(thread_rgb2gray_U0_start_full_n);
    sensitive << ( start_for_FAST_t_opr_U0_full_n );
    sensitive << ( start_for_PaintMask_U0_full_n );

    SC_METHOD(thread_start_for_Dilate_U0_din);

    SC_METHOD(thread_start_for_FAST_t_opr_U0_din);

    SC_METHOD(thread_start_for_Mat2AXIvideo_U0_din);

    SC_METHOD(thread_start_for_PaintMask_U0_din);

    SC_METHOD(thread_start_for_rgb2gray_U0_din);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "doCorner_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, inStream_TDATA, "(port)inStream_TDATA");
    sc_trace(mVcdFile, inStream_TKEEP, "(port)inStream_TKEEP");
    sc_trace(mVcdFile, inStream_TSTRB, "(port)inStream_TSTRB");
    sc_trace(mVcdFile, inStream_TUSER, "(port)inStream_TUSER");
    sc_trace(mVcdFile, inStream_TLAST, "(port)inStream_TLAST");
    sc_trace(mVcdFile, inStream_TID, "(port)inStream_TID");
    sc_trace(mVcdFile, inStream_TDEST, "(port)inStream_TDEST");
    sc_trace(mVcdFile, outStream_TDATA, "(port)outStream_TDATA");
    sc_trace(mVcdFile, outStream_TKEEP, "(port)outStream_TKEEP");
    sc_trace(mVcdFile, outStream_TSTRB, "(port)outStream_TSTRB");
    sc_trace(mVcdFile, outStream_TUSER, "(port)outStream_TUSER");
    sc_trace(mVcdFile, outStream_TLAST, "(port)outStream_TLAST");
    sc_trace(mVcdFile, outStream_TID, "(port)outStream_TID");
    sc_trace(mVcdFile, outStream_TDEST, "(port)outStream_TDEST");
    sc_trace(mVcdFile, inStream_TVALID, "(port)inStream_TVALID");
    sc_trace(mVcdFile, inStream_TREADY, "(port)inStream_TREADY");
    sc_trace(mVcdFile, outStream_TVALID, "(port)outStream_TVALID");
    sc_trace(mVcdFile, outStream_TREADY, "(port)outStream_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_ap_start, "AXIvideo2Mat_U0_ap_start");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_ap_done, "AXIvideo2Mat_U0_ap_done");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_ap_continue, "AXIvideo2Mat_U0_ap_continue");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_ap_idle, "AXIvideo2Mat_U0_ap_idle");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_ap_ready, "AXIvideo2Mat_U0_ap_ready");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_start_out, "AXIvideo2Mat_U0_start_out");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_start_write, "AXIvideo2Mat_U0_start_write");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_inStream_TREADY, "AXIvideo2Mat_U0_inStream_TREADY");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_img_data_stream_0_V_din, "AXIvideo2Mat_U0_img_data_stream_0_V_din");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_img_data_stream_0_V_write, "AXIvideo2Mat_U0_img_data_stream_0_V_write");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_img_data_stream_1_V_din, "AXIvideo2Mat_U0_img_data_stream_1_V_din");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_img_data_stream_1_V_write, "AXIvideo2Mat_U0_img_data_stream_1_V_write");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_img_data_stream_2_V_din, "AXIvideo2Mat_U0_img_data_stream_2_V_din");
    sc_trace(mVcdFile, AXIvideo2Mat_U0_img_data_stream_2_V_write, "AXIvideo2Mat_U0_img_data_stream_2_V_write");
    sc_trace(mVcdFile, rgb2gray_U0_ap_start, "rgb2gray_U0_ap_start");
    sc_trace(mVcdFile, rgb2gray_U0_start_full_n, "rgb2gray_U0_start_full_n");
    sc_trace(mVcdFile, rgb2gray_U0_ap_done, "rgb2gray_U0_ap_done");
    sc_trace(mVcdFile, rgb2gray_U0_ap_continue, "rgb2gray_U0_ap_continue");
    sc_trace(mVcdFile, rgb2gray_U0_ap_idle, "rgb2gray_U0_ap_idle");
    sc_trace(mVcdFile, rgb2gray_U0_ap_ready, "rgb2gray_U0_ap_ready");
    sc_trace(mVcdFile, rgb2gray_U0_start_out, "rgb2gray_U0_start_out");
    sc_trace(mVcdFile, rgb2gray_U0_start_write, "rgb2gray_U0_start_write");
    sc_trace(mVcdFile, rgb2gray_U0_imgIn_data_stream_0_V_read, "rgb2gray_U0_imgIn_data_stream_0_V_read");
    sc_trace(mVcdFile, rgb2gray_U0_imgIn_data_stream_1_V_read, "rgb2gray_U0_imgIn_data_stream_1_V_read");
    sc_trace(mVcdFile, rgb2gray_U0_imgIn_data_stream_2_V_read, "rgb2gray_U0_imgIn_data_stream_2_V_read");
    sc_trace(mVcdFile, rgb2gray_U0_imgOut_3C_data_stream_0_V_din, "rgb2gray_U0_imgOut_3C_data_stream_0_V_din");
    sc_trace(mVcdFile, rgb2gray_U0_imgOut_3C_data_stream_0_V_write, "rgb2gray_U0_imgOut_3C_data_stream_0_V_write");
    sc_trace(mVcdFile, rgb2gray_U0_imgOut_3C_data_stream_1_V_din, "rgb2gray_U0_imgOut_3C_data_stream_1_V_din");
    sc_trace(mVcdFile, rgb2gray_U0_imgOut_3C_data_stream_1_V_write, "rgb2gray_U0_imgOut_3C_data_stream_1_V_write");
    sc_trace(mVcdFile, rgb2gray_U0_imgOut_3C_data_stream_2_V_din, "rgb2gray_U0_imgOut_3C_data_stream_2_V_din");
    sc_trace(mVcdFile, rgb2gray_U0_imgOut_3C_data_stream_2_V_write, "rgb2gray_U0_imgOut_3C_data_stream_2_V_write");
    sc_trace(mVcdFile, rgb2gray_U0_imgOut_1C_data_stream_V_din, "rgb2gray_U0_imgOut_1C_data_stream_V_din");
    sc_trace(mVcdFile, rgb2gray_U0_imgOut_1C_data_stream_V_write, "rgb2gray_U0_imgOut_1C_data_stream_V_write");
    sc_trace(mVcdFile, FAST_t_opr_U0_ap_start, "FAST_t_opr_U0_ap_start");
    sc_trace(mVcdFile, FAST_t_opr_U0_ap_done, "FAST_t_opr_U0_ap_done");
    sc_trace(mVcdFile, FAST_t_opr_U0_ap_continue, "FAST_t_opr_U0_ap_continue");
    sc_trace(mVcdFile, FAST_t_opr_U0_ap_idle, "FAST_t_opr_U0_ap_idle");
    sc_trace(mVcdFile, FAST_t_opr_U0_ap_ready, "FAST_t_opr_U0_ap_ready");
    sc_trace(mVcdFile, FAST_t_opr_U0_start_out, "FAST_t_opr_U0_start_out");
    sc_trace(mVcdFile, FAST_t_opr_U0_start_write, "FAST_t_opr_U0_start_write");
    sc_trace(mVcdFile, FAST_t_opr_U0_p_src_data_stream_V_read, "FAST_t_opr_U0_p_src_data_stream_V_read");
    sc_trace(mVcdFile, FAST_t_opr_U0_p_mask_data_stream_V_din, "FAST_t_opr_U0_p_mask_data_stream_V_din");
    sc_trace(mVcdFile, FAST_t_opr_U0_p_mask_data_stream_V_write, "FAST_t_opr_U0_p_mask_data_stream_V_write");
    sc_trace(mVcdFile, Dilate_U0_ap_start, "Dilate_U0_ap_start");
    sc_trace(mVcdFile, Dilate_U0_ap_done, "Dilate_U0_ap_done");
    sc_trace(mVcdFile, Dilate_U0_ap_continue, "Dilate_U0_ap_continue");
    sc_trace(mVcdFile, Dilate_U0_ap_idle, "Dilate_U0_ap_idle");
    sc_trace(mVcdFile, Dilate_U0_ap_ready, "Dilate_U0_ap_ready");
    sc_trace(mVcdFile, Dilate_U0_p_src_data_stream_V_read, "Dilate_U0_p_src_data_stream_V_read");
    sc_trace(mVcdFile, Dilate_U0_p_dst_data_stream_V_din, "Dilate_U0_p_dst_data_stream_V_din");
    sc_trace(mVcdFile, Dilate_U0_p_dst_data_stream_V_write, "Dilate_U0_p_dst_data_stream_V_write");
    sc_trace(mVcdFile, PaintMask_U0_ap_start, "PaintMask_U0_ap_start");
    sc_trace(mVcdFile, PaintMask_U0_ap_done, "PaintMask_U0_ap_done");
    sc_trace(mVcdFile, PaintMask_U0_ap_continue, "PaintMask_U0_ap_continue");
    sc_trace(mVcdFile, PaintMask_U0_ap_idle, "PaintMask_U0_ap_idle");
    sc_trace(mVcdFile, PaintMask_U0_ap_ready, "PaintMask_U0_ap_ready");
    sc_trace(mVcdFile, PaintMask_U0_start_out, "PaintMask_U0_start_out");
    sc_trace(mVcdFile, PaintMask_U0_start_write, "PaintMask_U0_start_write");
    sc_trace(mVcdFile, PaintMask_U0_p_src_data_stream_0_V_read, "PaintMask_U0_p_src_data_stream_0_V_read");
    sc_trace(mVcdFile, PaintMask_U0_p_src_data_stream_1_V_read, "PaintMask_U0_p_src_data_stream_1_V_read");
    sc_trace(mVcdFile, PaintMask_U0_p_src_data_stream_2_V_read, "PaintMask_U0_p_src_data_stream_2_V_read");
    sc_trace(mVcdFile, PaintMask_U0_p_mask_data_stream_V_read, "PaintMask_U0_p_mask_data_stream_V_read");
    sc_trace(mVcdFile, PaintMask_U0_p_dst_data_stream_0_V_din, "PaintMask_U0_p_dst_data_stream_0_V_din");
    sc_trace(mVcdFile, PaintMask_U0_p_dst_data_stream_0_V_write, "PaintMask_U0_p_dst_data_stream_0_V_write");
    sc_trace(mVcdFile, PaintMask_U0_p_dst_data_stream_1_V_din, "PaintMask_U0_p_dst_data_stream_1_V_din");
    sc_trace(mVcdFile, PaintMask_U0_p_dst_data_stream_1_V_write, "PaintMask_U0_p_dst_data_stream_1_V_write");
    sc_trace(mVcdFile, PaintMask_U0_p_dst_data_stream_2_V_din, "PaintMask_U0_p_dst_data_stream_2_V_din");
    sc_trace(mVcdFile, PaintMask_U0_p_dst_data_stream_2_V_write, "PaintMask_U0_p_dst_data_stream_2_V_write");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_ap_start, "Mat2AXIvideo_U0_ap_start");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_ap_done, "Mat2AXIvideo_U0_ap_done");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_ap_continue, "Mat2AXIvideo_U0_ap_continue");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_ap_idle, "Mat2AXIvideo_U0_ap_idle");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_ap_ready, "Mat2AXIvideo_U0_ap_ready");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_img_data_stream_0_V_read, "Mat2AXIvideo_U0_img_data_stream_0_V_read");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_img_data_stream_1_V_read, "Mat2AXIvideo_U0_img_data_stream_1_V_read");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_img_data_stream_2_V_read, "Mat2AXIvideo_U0_img_data_stream_2_V_read");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_outStream_TDATA, "Mat2AXIvideo_U0_outStream_TDATA");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_outStream_TVALID, "Mat2AXIvideo_U0_outStream_TVALID");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_outStream_TKEEP, "Mat2AXIvideo_U0_outStream_TKEEP");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_outStream_TSTRB, "Mat2AXIvideo_U0_outStream_TSTRB");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_outStream_TUSER, "Mat2AXIvideo_U0_outStream_TUSER");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_outStream_TLAST, "Mat2AXIvideo_U0_outStream_TLAST");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_outStream_TID, "Mat2AXIvideo_U0_outStream_TID");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_outStream_TDEST, "Mat2AXIvideo_U0_outStream_TDEST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, img_0_data_stream_0_full_n, "img_0_data_stream_0_full_n");
    sc_trace(mVcdFile, img_0_data_stream_0_dout, "img_0_data_stream_0_dout");
    sc_trace(mVcdFile, img_0_data_stream_0_empty_n, "img_0_data_stream_0_empty_n");
    sc_trace(mVcdFile, img_0_data_stream_1_full_n, "img_0_data_stream_1_full_n");
    sc_trace(mVcdFile, img_0_data_stream_1_dout, "img_0_data_stream_1_dout");
    sc_trace(mVcdFile, img_0_data_stream_1_empty_n, "img_0_data_stream_1_empty_n");
    sc_trace(mVcdFile, img_0_data_stream_2_full_n, "img_0_data_stream_2_full_n");
    sc_trace(mVcdFile, img_0_data_stream_2_dout, "img_0_data_stream_2_dout");
    sc_trace(mVcdFile, img_0_data_stream_2_empty_n, "img_0_data_stream_2_empty_n");
    sc_trace(mVcdFile, img_1_data_stream_0_full_n, "img_1_data_stream_0_full_n");
    sc_trace(mVcdFile, img_1_data_stream_0_dout, "img_1_data_stream_0_dout");
    sc_trace(mVcdFile, img_1_data_stream_0_empty_n, "img_1_data_stream_0_empty_n");
    sc_trace(mVcdFile, img_1_data_stream_1_full_n, "img_1_data_stream_1_full_n");
    sc_trace(mVcdFile, img_1_data_stream_1_dout, "img_1_data_stream_1_dout");
    sc_trace(mVcdFile, img_1_data_stream_1_empty_n, "img_1_data_stream_1_empty_n");
    sc_trace(mVcdFile, img_1_data_stream_2_full_n, "img_1_data_stream_2_full_n");
    sc_trace(mVcdFile, img_1_data_stream_2_dout, "img_1_data_stream_2_dout");
    sc_trace(mVcdFile, img_1_data_stream_2_empty_n, "img_1_data_stream_2_empty_n");
    sc_trace(mVcdFile, img_2_data_stream_0_full_n, "img_2_data_stream_0_full_n");
    sc_trace(mVcdFile, img_2_data_stream_0_dout, "img_2_data_stream_0_dout");
    sc_trace(mVcdFile, img_2_data_stream_0_empty_n, "img_2_data_stream_0_empty_n");
    sc_trace(mVcdFile, mask_data_stream_0_s_full_n, "mask_data_stream_0_s_full_n");
    sc_trace(mVcdFile, mask_data_stream_0_s_dout, "mask_data_stream_0_s_dout");
    sc_trace(mVcdFile, mask_data_stream_0_s_empty_n, "mask_data_stream_0_s_empty_n");
    sc_trace(mVcdFile, dmask_data_stream_0_full_n, "dmask_data_stream_0_full_n");
    sc_trace(mVcdFile, dmask_data_stream_0_dout, "dmask_data_stream_0_dout");
    sc_trace(mVcdFile, dmask_data_stream_0_empty_n, "dmask_data_stream_0_empty_n");
    sc_trace(mVcdFile, img_3_data_stream_0_full_n, "img_3_data_stream_0_full_n");
    sc_trace(mVcdFile, img_3_data_stream_0_dout, "img_3_data_stream_0_dout");
    sc_trace(mVcdFile, img_3_data_stream_0_empty_n, "img_3_data_stream_0_empty_n");
    sc_trace(mVcdFile, img_3_data_stream_1_full_n, "img_3_data_stream_1_full_n");
    sc_trace(mVcdFile, img_3_data_stream_1_dout, "img_3_data_stream_1_dout");
    sc_trace(mVcdFile, img_3_data_stream_1_empty_n, "img_3_data_stream_1_empty_n");
    sc_trace(mVcdFile, img_3_data_stream_2_full_n, "img_3_data_stream_2_full_n");
    sc_trace(mVcdFile, img_3_data_stream_2_dout, "img_3_data_stream_2_dout");
    sc_trace(mVcdFile, img_3_data_stream_2_empty_n, "img_3_data_stream_2_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_rgb2gray_U0_din, "start_for_rgb2gray_U0_din");
    sc_trace(mVcdFile, start_for_rgb2gray_U0_full_n, "start_for_rgb2gray_U0_full_n");
    sc_trace(mVcdFile, start_for_rgb2gray_U0_dout, "start_for_rgb2gray_U0_dout");
    sc_trace(mVcdFile, start_for_rgb2gray_U0_empty_n, "start_for_rgb2gray_U0_empty_n");
    sc_trace(mVcdFile, start_for_FAST_t_opr_U0_din, "start_for_FAST_t_opr_U0_din");
    sc_trace(mVcdFile, start_for_FAST_t_opr_U0_full_n, "start_for_FAST_t_opr_U0_full_n");
    sc_trace(mVcdFile, start_for_FAST_t_opr_U0_dout, "start_for_FAST_t_opr_U0_dout");
    sc_trace(mVcdFile, start_for_FAST_t_opr_U0_empty_n, "start_for_FAST_t_opr_U0_empty_n");
    sc_trace(mVcdFile, start_for_PaintMask_U0_din, "start_for_PaintMask_U0_din");
    sc_trace(mVcdFile, start_for_PaintMask_U0_full_n, "start_for_PaintMask_U0_full_n");
    sc_trace(mVcdFile, start_for_PaintMask_U0_dout, "start_for_PaintMask_U0_dout");
    sc_trace(mVcdFile, start_for_PaintMask_U0_empty_n, "start_for_PaintMask_U0_empty_n");
    sc_trace(mVcdFile, start_for_Dilate_U0_din, "start_for_Dilate_U0_din");
    sc_trace(mVcdFile, start_for_Dilate_U0_full_n, "start_for_Dilate_U0_full_n");
    sc_trace(mVcdFile, start_for_Dilate_U0_dout, "start_for_Dilate_U0_dout");
    sc_trace(mVcdFile, start_for_Dilate_U0_empty_n, "start_for_Dilate_U0_empty_n");
    sc_trace(mVcdFile, Dilate_U0_start_full_n, "Dilate_U0_start_full_n");
    sc_trace(mVcdFile, Dilate_U0_start_write, "Dilate_U0_start_write");
    sc_trace(mVcdFile, start_for_Mat2AXIvideo_U0_din, "start_for_Mat2AXIvideo_U0_din");
    sc_trace(mVcdFile, start_for_Mat2AXIvideo_U0_full_n, "start_for_Mat2AXIvideo_U0_full_n");
    sc_trace(mVcdFile, start_for_Mat2AXIvideo_U0_dout, "start_for_Mat2AXIvideo_U0_dout");
    sc_trace(mVcdFile, start_for_Mat2AXIvideo_U0_empty_n, "start_for_Mat2AXIvideo_U0_empty_n");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_start_full_n, "Mat2AXIvideo_U0_start_full_n");
    sc_trace(mVcdFile, Mat2AXIvideo_U0_start_write, "Mat2AXIvideo_U0_start_write");
#endif

    }
    mHdltvinHandle.open("doCorner.hdltvin.dat");
    mHdltvoutHandle.open("doCorner.hdltvout.dat");
}

doCorner::~doCorner() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete doCorner_CTRL_BUS_s_axi_U;
    delete AXIvideo2Mat_U0;
    delete rgb2gray_U0;
    delete FAST_t_opr_U0;
    delete Dilate_U0;
    delete PaintMask_U0;
    delete Mat2AXIvideo_U0;
    delete img_0_data_stream_0_U;
    delete img_0_data_stream_1_U;
    delete img_0_data_stream_2_U;
    delete img_1_data_stream_0_U;
    delete img_1_data_stream_1_U;
    delete img_1_data_stream_2_U;
    delete img_2_data_stream_0_U;
    delete mask_data_stream_0_s_U;
    delete dmask_data_stream_0_U;
    delete img_3_data_stream_0_U;
    delete img_3_data_stream_1_U;
    delete img_3_data_stream_2_U;
    delete start_for_rgb2grapcA_U;
    delete start_for_FAST_t_qcK_U;
    delete start_for_PaintMarcU_U;
    delete start_for_Dilate_U0_U;
    delete start_for_Mat2AXIsc4_U;
}

void doCorner::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void doCorner::thread_AXIvideo2Mat_U0_ap_continue() {
    AXIvideo2Mat_U0_ap_continue = ap_const_logic_1;
}

void doCorner::thread_AXIvideo2Mat_U0_ap_start() {
    AXIvideo2Mat_U0_ap_start = ap_start.read();
}

void doCorner::thread_Dilate_U0_ap_continue() {
    Dilate_U0_ap_continue = ap_const_logic_1;
}

void doCorner::thread_Dilate_U0_ap_start() {
    Dilate_U0_ap_start = start_for_Dilate_U0_empty_n.read();
}

void doCorner::thread_Dilate_U0_start_full_n() {
    Dilate_U0_start_full_n = ap_const_logic_1;
}

void doCorner::thread_Dilate_U0_start_write() {
    Dilate_U0_start_write = ap_const_logic_0;
}

void doCorner::thread_FAST_t_opr_U0_ap_continue() {
    FAST_t_opr_U0_ap_continue = ap_const_logic_1;
}

void doCorner::thread_FAST_t_opr_U0_ap_start() {
    FAST_t_opr_U0_ap_start = start_for_FAST_t_opr_U0_empty_n.read();
}

void doCorner::thread_Mat2AXIvideo_U0_ap_continue() {
    Mat2AXIvideo_U0_ap_continue = ap_const_logic_1;
}

void doCorner::thread_Mat2AXIvideo_U0_ap_start() {
    Mat2AXIvideo_U0_ap_start = start_for_Mat2AXIvideo_U0_empty_n.read();
}

void doCorner::thread_Mat2AXIvideo_U0_start_full_n() {
    Mat2AXIvideo_U0_start_full_n = ap_const_logic_1;
}

void doCorner::thread_Mat2AXIvideo_U0_start_write() {
    Mat2AXIvideo_U0_start_write = ap_const_logic_0;
}

void doCorner::thread_PaintMask_U0_ap_continue() {
    PaintMask_U0_ap_continue = ap_const_logic_1;
}

void doCorner::thread_PaintMask_U0_ap_start() {
    PaintMask_U0_ap_start = start_for_PaintMask_U0_empty_n.read();
}

void doCorner::thread_ap_done() {
    ap_done = Mat2AXIvideo_U0_ap_done.read();
}

void doCorner::thread_ap_idle() {
    ap_idle = (AXIvideo2Mat_U0_ap_idle.read() & rgb2gray_U0_ap_idle.read() & FAST_t_opr_U0_ap_idle.read() & Dilate_U0_ap_idle.read() & PaintMask_U0_ap_idle.read() & Mat2AXIvideo_U0_ap_idle.read());
}

void doCorner::thread_ap_ready() {
    ap_ready = AXIvideo2Mat_U0_ap_ready.read();
}

void doCorner::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void doCorner::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void doCorner::thread_ap_sync_done() {
    ap_sync_done = Mat2AXIvideo_U0_ap_done.read();
}

void doCorner::thread_ap_sync_ready() {
    ap_sync_ready = AXIvideo2Mat_U0_ap_ready.read();
}

void doCorner::thread_inStream_TREADY() {
    inStream_TREADY = AXIvideo2Mat_U0_inStream_TREADY.read();
}

void doCorner::thread_outStream_TDATA() {
    outStream_TDATA = Mat2AXIvideo_U0_outStream_TDATA.read();
}

void doCorner::thread_outStream_TDEST() {
    outStream_TDEST = Mat2AXIvideo_U0_outStream_TDEST.read();
}

void doCorner::thread_outStream_TID() {
    outStream_TID = Mat2AXIvideo_U0_outStream_TID.read();
}

void doCorner::thread_outStream_TKEEP() {
    outStream_TKEEP = Mat2AXIvideo_U0_outStream_TKEEP.read();
}

void doCorner::thread_outStream_TLAST() {
    outStream_TLAST = Mat2AXIvideo_U0_outStream_TLAST.read();
}

void doCorner::thread_outStream_TSTRB() {
    outStream_TSTRB = Mat2AXIvideo_U0_outStream_TSTRB.read();
}

void doCorner::thread_outStream_TUSER() {
    outStream_TUSER = Mat2AXIvideo_U0_outStream_TUSER.read();
}

void doCorner::thread_outStream_TVALID() {
    outStream_TVALID = Mat2AXIvideo_U0_outStream_TVALID.read();
}

void doCorner::thread_rgb2gray_U0_ap_continue() {
    rgb2gray_U0_ap_continue = ap_const_logic_1;
}

void doCorner::thread_rgb2gray_U0_ap_start() {
    rgb2gray_U0_ap_start = start_for_rgb2gray_U0_empty_n.read();
}

void doCorner::thread_rgb2gray_U0_start_full_n() {
    rgb2gray_U0_start_full_n = (start_for_FAST_t_opr_U0_full_n.read() & start_for_PaintMask_U0_full_n.read());
}

void doCorner::thread_start_for_Dilate_U0_din() {
    start_for_Dilate_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void doCorner::thread_start_for_FAST_t_opr_U0_din() {
    start_for_FAST_t_opr_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void doCorner::thread_start_for_Mat2AXIvideo_U0_din() {
    start_for_Mat2AXIvideo_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void doCorner::thread_start_for_PaintMask_U0_din() {
    start_for_PaintMask_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void doCorner::thread_start_for_rgb2gray_U0_din() {
    start_for_rgb2gray_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void doCorner::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDATA\" :  \"" << inStream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TKEEP\" :  \"" << inStream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TSTRB\" :  \"" << inStream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TUSER\" :  \"" << inStream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TLAST\" :  \"" << inStream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TID\" :  \"" << inStream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDEST\" :  \"" << inStream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDATA\" :  \"" << outStream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TKEEP\" :  \"" << outStream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TSTRB\" :  \"" << outStream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TUSER\" :  \"" << outStream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TLAST\" :  \"" << outStream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TID\" :  \"" << outStream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDEST\" :  \"" << outStream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TVALID\" :  \"" << inStream_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inStream_TREADY\" :  \"" << inStream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TVALID\" :  \"" << outStream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_TREADY\" :  \"" << outStream_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

