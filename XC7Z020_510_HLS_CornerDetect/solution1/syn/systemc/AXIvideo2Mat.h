// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AXIvideo2Mat_HH_
#define _AXIvideo2Mat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AXIvideo2Mat : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<24> > inStream_TDATA;
    sc_in< sc_logic > inStream_TVALID;
    sc_out< sc_logic > inStream_TREADY;
    sc_in< sc_lv<3> > inStream_TKEEP;
    sc_in< sc_lv<3> > inStream_TSTRB;
    sc_in< sc_lv<1> > inStream_TUSER;
    sc_in< sc_lv<1> > inStream_TLAST;
    sc_in< sc_lv<1> > inStream_TID;
    sc_in< sc_lv<1> > inStream_TDEST;
    sc_out< sc_lv<8> > img_data_stream_0_V_din;
    sc_in< sc_logic > img_data_stream_0_V_full_n;
    sc_out< sc_logic > img_data_stream_0_V_write;
    sc_out< sc_lv<8> > img_data_stream_1_V_din;
    sc_in< sc_logic > img_data_stream_1_V_full_n;
    sc_out< sc_logic > img_data_stream_1_V_write;
    sc_out< sc_lv<8> > img_data_stream_2_V_din;
    sc_in< sc_logic > img_data_stream_2_V_full_n;
    sc_out< sc_logic > img_data_stream_2_V_write;


    // Module declarations
    AXIvideo2Mat(sc_module_name name);
    SC_HAS_PROCESS(AXIvideo2Mat);

    ~AXIvideo2Mat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<24> > AXI_video_strm_V_data_V_0_data_out;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_vld_in;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_vld_out;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_ack_in;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_ack_out;
    sc_signal< sc_lv<24> > AXI_video_strm_V_data_V_0_payload_A;
    sc_signal< sc_lv<24> > AXI_video_strm_V_data_V_0_payload_B;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_sel_rd;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_sel_wr;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_sel;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_load_A;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > AXI_video_strm_V_data_V_0_state;
    sc_signal< sc_logic > AXI_video_strm_V_data_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > AXI_video_strm_V_user_V_0_data_out;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_vld_in;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_vld_out;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_ack_in;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_ack_out;
    sc_signal< sc_lv<1> > AXI_video_strm_V_user_V_0_payload_A;
    sc_signal< sc_lv<1> > AXI_video_strm_V_user_V_0_payload_B;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_sel_rd;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_sel_wr;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_sel;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_load_A;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_load_B;
    sc_signal< sc_lv<2> > AXI_video_strm_V_user_V_0_state;
    sc_signal< sc_logic > AXI_video_strm_V_user_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > AXI_video_strm_V_last_V_0_data_out;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_vld_in;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_vld_out;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_ack_in;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_ack_out;
    sc_signal< sc_lv<1> > AXI_video_strm_V_last_V_0_payload_A;
    sc_signal< sc_lv<1> > AXI_video_strm_V_last_V_0_payload_B;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_sel_rd;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_sel_wr;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_sel;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_load_A;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_load_B;
    sc_signal< sc_lv<2> > AXI_video_strm_V_last_V_0_state;
    sc_signal< sc_logic > AXI_video_strm_V_last_V_0_state_cmp_full;
    sc_signal< sc_logic > AXI_video_strm_V_dest_V_0_vld_in;
    sc_signal< sc_logic > AXI_video_strm_V_dest_V_0_ack_out;
    sc_signal< sc_lv<2> > AXI_video_strm_V_dest_V_0_state;
    sc_signal< sc_logic > inStream_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > exitcond_fu_337_p2;
    sc_signal< sc_lv<1> > brmerge_fu_352_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_2_phi_fu_299_p4;
    sc_signal< sc_logic > img_data_stream_0_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<1> > exitcond_reg_416;
    sc_signal< sc_logic > img_data_stream_1_V_blk_n;
    sc_signal< sc_logic > img_data_stream_2_V_blk_n;
    sc_signal< sc_lv<1> > eol_1_reg_202;
    sc_signal< sc_lv<24> > axi_data_V_1_reg_213;
    sc_signal< sc_lv<11> > t_V_5_reg_224;
    sc_signal< sc_lv<1> > eol_reg_235;
    sc_signal< sc_lv<1> > axi_last_V_2_reg_247;
    sc_signal< sc_lv<24> > p_Val2_s_reg_260;
    sc_signal< sc_lv<24> > tmp_data_V_reg_387;
    sc_signal< sc_lv<1> > tmp_last_V_reg_395;
    sc_signal< sc_lv<1> > exitcond1_fu_325_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<10> > i_V_fu_331_p2;
    sc_signal< sc_lv<10> > i_V_reg_411;
    sc_signal< bool > ap_predicate_op50_read_state5;
    sc_signal< bool > ap_block_state5_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<11> > j_V_fu_343_p2;
    sc_signal< sc_lv<8> > tmp_68_fu_358_p1;
    sc_signal< sc_lv<8> > tmp_68_reg_429;
    sc_signal< sc_lv<8> > tmp_46_reg_434;
    sc_signal< sc_lv<8> > tmp_47_reg_439;
    sc_signal< bool > ap_block_state8;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state5;
    sc_signal< sc_lv<1> > axi_last_V_3_reg_272;
    sc_signal< sc_lv<1> > axi_last_V1_reg_171;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<24> > axi_data_V_3_reg_284;
    sc_signal< sc_lv<24> > axi_data_V1_reg_181;
    sc_signal< sc_lv<10> > t_V_reg_191;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_1_phi_fu_205_p4;
    sc_signal< sc_lv<24> > ap_phi_mux_axi_data_V_1_phi_fu_216_p4;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_phi_fu_239_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp1_iter0_axi_last_V_2_reg_247;
    sc_signal< sc_lv<24> > ap_phi_mux_p_Val2_s_phi_fu_264_p4;
    sc_signal< sc_lv<24> > ap_phi_reg_pp1_iter0_p_Val2_s_reg_260;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > eol_2_reg_296;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<1> > sof_1_fu_128;
    sc_signal< sc_lv<1> > tmp_user_V_fu_316_p1;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< bool > ap_condition_639;
    sc_signal< bool > ap_condition_559;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_pp1_stage0;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<8> ap_ST_fsm_state9;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<10> ap_const_lv10_300;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_AXI_video_strm_V_data_V_0_ack_in();
    void thread_AXI_video_strm_V_data_V_0_ack_out();
    void thread_AXI_video_strm_V_data_V_0_data_out();
    void thread_AXI_video_strm_V_data_V_0_load_A();
    void thread_AXI_video_strm_V_data_V_0_load_B();
    void thread_AXI_video_strm_V_data_V_0_sel();
    void thread_AXI_video_strm_V_data_V_0_state_cmp_full();
    void thread_AXI_video_strm_V_data_V_0_vld_in();
    void thread_AXI_video_strm_V_data_V_0_vld_out();
    void thread_AXI_video_strm_V_dest_V_0_ack_out();
    void thread_AXI_video_strm_V_dest_V_0_vld_in();
    void thread_AXI_video_strm_V_last_V_0_ack_in();
    void thread_AXI_video_strm_V_last_V_0_ack_out();
    void thread_AXI_video_strm_V_last_V_0_data_out();
    void thread_AXI_video_strm_V_last_V_0_load_A();
    void thread_AXI_video_strm_V_last_V_0_load_B();
    void thread_AXI_video_strm_V_last_V_0_sel();
    void thread_AXI_video_strm_V_last_V_0_state_cmp_full();
    void thread_AXI_video_strm_V_last_V_0_vld_in();
    void thread_AXI_video_strm_V_last_V_0_vld_out();
    void thread_AXI_video_strm_V_user_V_0_ack_in();
    void thread_AXI_video_strm_V_user_V_0_ack_out();
    void thread_AXI_video_strm_V_user_V_0_data_out();
    void thread_AXI_video_strm_V_user_V_0_load_A();
    void thread_AXI_video_strm_V_user_V_0_load_B();
    void thread_AXI_video_strm_V_user_V_0_sel();
    void thread_AXI_video_strm_V_user_V_0_state_cmp_full();
    void thread_AXI_video_strm_V_user_V_0_vld_in();
    void thread_AXI_video_strm_V_user_V_0_vld_out();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state5_pp1_stage0_iter0();
    void thread_ap_block_state6_pp1_stage0_iter1();
    void thread_ap_block_state8();
    void thread_ap_condition_559();
    void thread_ap_condition_639();
    void thread_ap_condition_pp1_exit_iter0_state5();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_axi_data_V_1_phi_fu_216_p4();
    void thread_ap_phi_mux_eol_1_phi_fu_205_p4();
    void thread_ap_phi_mux_eol_2_phi_fu_299_p4();
    void thread_ap_phi_mux_eol_phi_fu_239_p4();
    void thread_ap_phi_mux_p_Val2_s_phi_fu_264_p4();
    void thread_ap_phi_reg_pp1_iter0_axi_last_V_2_reg_247();
    void thread_ap_phi_reg_pp1_iter0_p_Val2_s_reg_260();
    void thread_ap_predicate_op50_read_state5();
    void thread_ap_ready();
    void thread_brmerge_fu_352_p2();
    void thread_exitcond1_fu_325_p2();
    void thread_exitcond_fu_337_p2();
    void thread_i_V_fu_331_p2();
    void thread_img_data_stream_0_V_blk_n();
    void thread_img_data_stream_0_V_din();
    void thread_img_data_stream_0_V_write();
    void thread_img_data_stream_1_V_blk_n();
    void thread_img_data_stream_1_V_din();
    void thread_img_data_stream_1_V_write();
    void thread_img_data_stream_2_V_blk_n();
    void thread_img_data_stream_2_V_din();
    void thread_img_data_stream_2_V_write();
    void thread_inStream_TDATA_blk_n();
    void thread_inStream_TREADY();
    void thread_internal_ap_ready();
    void thread_j_V_fu_343_p2();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_68_fu_358_p1();
    void thread_tmp_user_V_fu_316_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
