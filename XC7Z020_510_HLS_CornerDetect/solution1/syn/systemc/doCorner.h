// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _doCorner_HH_
#define _doCorner_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "AXIvideo2Mat.h"
#include "rgb2gray.h"
#include "FAST_t_opr.h"
#include "Dilate.h"
#include "PaintMask.h"
#include "Mat2AXIvideo.h"
#include "fifo_w8_d2_A.h"
#include "fifo_w8_d20000_A.h"
#include "start_for_rgb2grapcA.h"
#include "start_for_FAST_t_qcK.h"
#include "start_for_PaintMarcU.h"
#include "start_for_Dilate_U0.h"
#include "start_for_Mat2AXIsc4.h"
#include "doCorner_CTRL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CTRL_BUS_ADDR_WIDTH = 4,
         unsigned int C_S_AXI_CTRL_BUS_DATA_WIDTH = 32>
struct doCorner : public sc_module {
    // Port declarations 38
    sc_in< sc_logic > s_axi_CTRL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH/8> > s_axi_CTRL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_in< sc_lv<24> > inStream_TDATA;
    sc_in< sc_lv<3> > inStream_TKEEP;
    sc_in< sc_lv<3> > inStream_TSTRB;
    sc_in< sc_lv<1> > inStream_TUSER;
    sc_in< sc_lv<1> > inStream_TLAST;
    sc_in< sc_lv<1> > inStream_TID;
    sc_in< sc_lv<1> > inStream_TDEST;
    sc_out< sc_lv<24> > outStream_TDATA;
    sc_out< sc_lv<3> > outStream_TKEEP;
    sc_out< sc_lv<3> > outStream_TSTRB;
    sc_out< sc_lv<1> > outStream_TUSER;
    sc_out< sc_lv<1> > outStream_TLAST;
    sc_out< sc_lv<1> > outStream_TID;
    sc_out< sc_lv<1> > outStream_TDEST;
    sc_in< sc_logic > inStream_TVALID;
    sc_out< sc_logic > inStream_TREADY;
    sc_out< sc_logic > outStream_TVALID;
    sc_in< sc_logic > outStream_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    doCorner(sc_module_name name);
    SC_HAS_PROCESS(doCorner);

    ~doCorner();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    doCorner_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>* doCorner_CTRL_BUS_s_axi_U;
    AXIvideo2Mat* AXIvideo2Mat_U0;
    rgb2gray* rgb2gray_U0;
    FAST_t_opr* FAST_t_opr_U0;
    Dilate* Dilate_U0;
    PaintMask* PaintMask_U0;
    Mat2AXIvideo* Mat2AXIvideo_U0;
    fifo_w8_d2_A* img_0_data_stream_0_U;
    fifo_w8_d2_A* img_0_data_stream_1_U;
    fifo_w8_d2_A* img_0_data_stream_2_U;
    fifo_w8_d20000_A* img_1_data_stream_0_U;
    fifo_w8_d20000_A* img_1_data_stream_1_U;
    fifo_w8_d20000_A* img_1_data_stream_2_U;
    fifo_w8_d2_A* img_2_data_stream_0_U;
    fifo_w8_d2_A* mask_data_stream_0_s_U;
    fifo_w8_d2_A* dmask_data_stream_0_U;
    fifo_w8_d2_A* img_3_data_stream_0_U;
    fifo_w8_d2_A* img_3_data_stream_1_U;
    fifo_w8_d2_A* img_3_data_stream_2_U;
    start_for_rgb2grapcA* start_for_rgb2grapcA_U;
    start_for_FAST_t_qcK* start_for_FAST_t_qcK_U;
    start_for_PaintMarcU* start_for_PaintMarcU_U;
    start_for_Dilate_U0* start_for_Dilate_U0_U;
    start_for_Mat2AXIsc4* start_for_Mat2AXIsc4_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_start;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_done;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_continue;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_idle;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_ready;
    sc_signal< sc_logic > AXIvideo2Mat_U0_start_out;
    sc_signal< sc_logic > AXIvideo2Mat_U0_start_write;
    sc_signal< sc_logic > AXIvideo2Mat_U0_inStream_TREADY;
    sc_signal< sc_lv<8> > AXIvideo2Mat_U0_img_data_stream_0_V_din;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_data_stream_0_V_write;
    sc_signal< sc_lv<8> > AXIvideo2Mat_U0_img_data_stream_1_V_din;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_data_stream_1_V_write;
    sc_signal< sc_lv<8> > AXIvideo2Mat_U0_img_data_stream_2_V_din;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_data_stream_2_V_write;
    sc_signal< sc_logic > rgb2gray_U0_ap_start;
    sc_signal< sc_logic > rgb2gray_U0_start_full_n;
    sc_signal< sc_logic > rgb2gray_U0_ap_done;
    sc_signal< sc_logic > rgb2gray_U0_ap_continue;
    sc_signal< sc_logic > rgb2gray_U0_ap_idle;
    sc_signal< sc_logic > rgb2gray_U0_ap_ready;
    sc_signal< sc_logic > rgb2gray_U0_start_out;
    sc_signal< sc_logic > rgb2gray_U0_start_write;
    sc_signal< sc_logic > rgb2gray_U0_imgIn_data_stream_0_V_read;
    sc_signal< sc_logic > rgb2gray_U0_imgIn_data_stream_1_V_read;
    sc_signal< sc_logic > rgb2gray_U0_imgIn_data_stream_2_V_read;
    sc_signal< sc_lv<8> > rgb2gray_U0_imgOut_3C_data_stream_0_V_din;
    sc_signal< sc_logic > rgb2gray_U0_imgOut_3C_data_stream_0_V_write;
    sc_signal< sc_lv<8> > rgb2gray_U0_imgOut_3C_data_stream_1_V_din;
    sc_signal< sc_logic > rgb2gray_U0_imgOut_3C_data_stream_1_V_write;
    sc_signal< sc_lv<8> > rgb2gray_U0_imgOut_3C_data_stream_2_V_din;
    sc_signal< sc_logic > rgb2gray_U0_imgOut_3C_data_stream_2_V_write;
    sc_signal< sc_lv<8> > rgb2gray_U0_imgOut_1C_data_stream_V_din;
    sc_signal< sc_logic > rgb2gray_U0_imgOut_1C_data_stream_V_write;
    sc_signal< sc_logic > FAST_t_opr_U0_ap_start;
    sc_signal< sc_logic > FAST_t_opr_U0_ap_done;
    sc_signal< sc_logic > FAST_t_opr_U0_ap_continue;
    sc_signal< sc_logic > FAST_t_opr_U0_ap_idle;
    sc_signal< sc_logic > FAST_t_opr_U0_ap_ready;
    sc_signal< sc_logic > FAST_t_opr_U0_start_out;
    sc_signal< sc_logic > FAST_t_opr_U0_start_write;
    sc_signal< sc_logic > FAST_t_opr_U0_p_src_data_stream_V_read;
    sc_signal< sc_lv<8> > FAST_t_opr_U0_p_mask_data_stream_V_din;
    sc_signal< sc_logic > FAST_t_opr_U0_p_mask_data_stream_V_write;
    sc_signal< sc_logic > Dilate_U0_ap_start;
    sc_signal< sc_logic > Dilate_U0_ap_done;
    sc_signal< sc_logic > Dilate_U0_ap_continue;
    sc_signal< sc_logic > Dilate_U0_ap_idle;
    sc_signal< sc_logic > Dilate_U0_ap_ready;
    sc_signal< sc_logic > Dilate_U0_p_src_data_stream_V_read;
    sc_signal< sc_lv<8> > Dilate_U0_p_dst_data_stream_V_din;
    sc_signal< sc_logic > Dilate_U0_p_dst_data_stream_V_write;
    sc_signal< sc_logic > PaintMask_U0_ap_start;
    sc_signal< sc_logic > PaintMask_U0_ap_done;
    sc_signal< sc_logic > PaintMask_U0_ap_continue;
    sc_signal< sc_logic > PaintMask_U0_ap_idle;
    sc_signal< sc_logic > PaintMask_U0_ap_ready;
    sc_signal< sc_logic > PaintMask_U0_start_out;
    sc_signal< sc_logic > PaintMask_U0_start_write;
    sc_signal< sc_logic > PaintMask_U0_p_src_data_stream_0_V_read;
    sc_signal< sc_logic > PaintMask_U0_p_src_data_stream_1_V_read;
    sc_signal< sc_logic > PaintMask_U0_p_src_data_stream_2_V_read;
    sc_signal< sc_logic > PaintMask_U0_p_mask_data_stream_V_read;
    sc_signal< sc_lv<8> > PaintMask_U0_p_dst_data_stream_0_V_din;
    sc_signal< sc_logic > PaintMask_U0_p_dst_data_stream_0_V_write;
    sc_signal< sc_lv<8> > PaintMask_U0_p_dst_data_stream_1_V_din;
    sc_signal< sc_logic > PaintMask_U0_p_dst_data_stream_1_V_write;
    sc_signal< sc_lv<8> > PaintMask_U0_p_dst_data_stream_2_V_din;
    sc_signal< sc_logic > PaintMask_U0_p_dst_data_stream_2_V_write;
    sc_signal< sc_logic > Mat2AXIvideo_U0_ap_start;
    sc_signal< sc_logic > Mat2AXIvideo_U0_ap_done;
    sc_signal< sc_logic > Mat2AXIvideo_U0_ap_continue;
    sc_signal< sc_logic > Mat2AXIvideo_U0_ap_idle;
    sc_signal< sc_logic > Mat2AXIvideo_U0_ap_ready;
    sc_signal< sc_logic > Mat2AXIvideo_U0_img_data_stream_0_V_read;
    sc_signal< sc_logic > Mat2AXIvideo_U0_img_data_stream_1_V_read;
    sc_signal< sc_logic > Mat2AXIvideo_U0_img_data_stream_2_V_read;
    sc_signal< sc_lv<24> > Mat2AXIvideo_U0_outStream_TDATA;
    sc_signal< sc_logic > Mat2AXIvideo_U0_outStream_TVALID;
    sc_signal< sc_lv<3> > Mat2AXIvideo_U0_outStream_TKEEP;
    sc_signal< sc_lv<3> > Mat2AXIvideo_U0_outStream_TSTRB;
    sc_signal< sc_lv<1> > Mat2AXIvideo_U0_outStream_TUSER;
    sc_signal< sc_lv<1> > Mat2AXIvideo_U0_outStream_TLAST;
    sc_signal< sc_lv<1> > Mat2AXIvideo_U0_outStream_TID;
    sc_signal< sc_lv<1> > Mat2AXIvideo_U0_outStream_TDEST;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > img_0_data_stream_0_full_n;
    sc_signal< sc_lv<8> > img_0_data_stream_0_dout;
    sc_signal< sc_logic > img_0_data_stream_0_empty_n;
    sc_signal< sc_logic > img_0_data_stream_1_full_n;
    sc_signal< sc_lv<8> > img_0_data_stream_1_dout;
    sc_signal< sc_logic > img_0_data_stream_1_empty_n;
    sc_signal< sc_logic > img_0_data_stream_2_full_n;
    sc_signal< sc_lv<8> > img_0_data_stream_2_dout;
    sc_signal< sc_logic > img_0_data_stream_2_empty_n;
    sc_signal< sc_logic > img_1_data_stream_0_full_n;
    sc_signal< sc_lv<8> > img_1_data_stream_0_dout;
    sc_signal< sc_logic > img_1_data_stream_0_empty_n;
    sc_signal< sc_logic > img_1_data_stream_1_full_n;
    sc_signal< sc_lv<8> > img_1_data_stream_1_dout;
    sc_signal< sc_logic > img_1_data_stream_1_empty_n;
    sc_signal< sc_logic > img_1_data_stream_2_full_n;
    sc_signal< sc_lv<8> > img_1_data_stream_2_dout;
    sc_signal< sc_logic > img_1_data_stream_2_empty_n;
    sc_signal< sc_logic > img_2_data_stream_0_full_n;
    sc_signal< sc_lv<8> > img_2_data_stream_0_dout;
    sc_signal< sc_logic > img_2_data_stream_0_empty_n;
    sc_signal< sc_logic > mask_data_stream_0_s_full_n;
    sc_signal< sc_lv<8> > mask_data_stream_0_s_dout;
    sc_signal< sc_logic > mask_data_stream_0_s_empty_n;
    sc_signal< sc_logic > dmask_data_stream_0_full_n;
    sc_signal< sc_lv<8> > dmask_data_stream_0_dout;
    sc_signal< sc_logic > dmask_data_stream_0_empty_n;
    sc_signal< sc_logic > img_3_data_stream_0_full_n;
    sc_signal< sc_lv<8> > img_3_data_stream_0_dout;
    sc_signal< sc_logic > img_3_data_stream_0_empty_n;
    sc_signal< sc_logic > img_3_data_stream_1_full_n;
    sc_signal< sc_lv<8> > img_3_data_stream_1_dout;
    sc_signal< sc_logic > img_3_data_stream_1_empty_n;
    sc_signal< sc_logic > img_3_data_stream_2_full_n;
    sc_signal< sc_lv<8> > img_3_data_stream_2_dout;
    sc_signal< sc_logic > img_3_data_stream_2_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_rgb2gray_U0_din;
    sc_signal< sc_logic > start_for_rgb2gray_U0_full_n;
    sc_signal< sc_lv<1> > start_for_rgb2gray_U0_dout;
    sc_signal< sc_logic > start_for_rgb2gray_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_FAST_t_opr_U0_din;
    sc_signal< sc_logic > start_for_FAST_t_opr_U0_full_n;
    sc_signal< sc_lv<1> > start_for_FAST_t_opr_U0_dout;
    sc_signal< sc_logic > start_for_FAST_t_opr_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_PaintMask_U0_din;
    sc_signal< sc_logic > start_for_PaintMask_U0_full_n;
    sc_signal< sc_lv<1> > start_for_PaintMask_U0_dout;
    sc_signal< sc_logic > start_for_PaintMask_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_Dilate_U0_din;
    sc_signal< sc_logic > start_for_Dilate_U0_full_n;
    sc_signal< sc_lv<1> > start_for_Dilate_U0_dout;
    sc_signal< sc_logic > start_for_Dilate_U0_empty_n;
    sc_signal< sc_logic > Dilate_U0_start_full_n;
    sc_signal< sc_logic > Dilate_U0_start_write;
    sc_signal< sc_lv<1> > start_for_Mat2AXIvideo_U0_din;
    sc_signal< sc_logic > start_for_Mat2AXIvideo_U0_full_n;
    sc_signal< sc_lv<1> > start_for_Mat2AXIvideo_U0_dout;
    sc_signal< sc_logic > start_for_Mat2AXIvideo_U0_empty_n;
    sc_signal< sc_logic > Mat2AXIvideo_U0_start_full_n;
    sc_signal< sc_logic > Mat2AXIvideo_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_AXIvideo2Mat_U0_ap_continue();
    void thread_AXIvideo2Mat_U0_ap_start();
    void thread_Dilate_U0_ap_continue();
    void thread_Dilate_U0_ap_start();
    void thread_Dilate_U0_start_full_n();
    void thread_Dilate_U0_start_write();
    void thread_FAST_t_opr_U0_ap_continue();
    void thread_FAST_t_opr_U0_ap_start();
    void thread_Mat2AXIvideo_U0_ap_continue();
    void thread_Mat2AXIvideo_U0_ap_start();
    void thread_Mat2AXIvideo_U0_start_full_n();
    void thread_Mat2AXIvideo_U0_start_write();
    void thread_PaintMask_U0_ap_continue();
    void thread_PaintMask_U0_ap_start();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_inStream_TREADY();
    void thread_outStream_TDATA();
    void thread_outStream_TDEST();
    void thread_outStream_TID();
    void thread_outStream_TKEEP();
    void thread_outStream_TLAST();
    void thread_outStream_TSTRB();
    void thread_outStream_TUSER();
    void thread_outStream_TVALID();
    void thread_rgb2gray_U0_ap_continue();
    void thread_rgb2gray_U0_ap_start();
    void thread_rgb2gray_U0_start_full_n();
    void thread_start_for_Dilate_U0_din();
    void thread_start_for_FAST_t_opr_U0_din();
    void thread_start_for_Mat2AXIvideo_U0_din();
    void thread_start_for_PaintMask_U0_din();
    void thread_start_for_rgb2gray_U0_din();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
