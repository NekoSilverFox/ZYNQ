/*
* Lab2_PSPL.c: test application
*/
#include <stdio.h>
#include "platform.h"
#include "xil_types.h"
#include "xgpio.h"
#include "xtmrctr.h"
#include "xparameters.h"
#include "xgpiops.h"
#include "xil_io.h"
#include "xil_exception.h"
#include "xscugic.h"

// ***************************** define *****************************
// LED
#define MIO_LED1 			50							/* 核心板PS端LED1 */
#define MIO_LED2 			51							/* 核心板PS端LED2 */

#define KEY_ON				0							/* 按键按下（低电平） */
#define KEY_OFF				1							/* 按键关闭（高电平） */

#define LED_ON				1							/* 按键按下（低电平） */
#define LED_OFF				0							/* 按键关闭（高电平） */
#define GPIO_CHANNEL_1		1
#define AXI_TIMER_RESET_VALUE	0xf0000000

#define true				1
#define false				0
// ------------------------------------------------------------------


// ************************** 实例及全局变量  **************************
static XGpioPs psGpioInstancePtr;
extern XGpioPs_Config XGpioPs_ConfigTable[XPAR_XGPIOPS_NUM_INSTANCES];

XScuGic InterruptController;      					/* Instance of the Interrupt Controller */
static XScuGic_Config* GicConfig; 					/* The configuration parameters of the controller */

static int iPsLed = MIO_LED1;
static int InterruptFlag;
extern char inbyte(void);
// ------------------------------------------------------------------


// ***************************** 函数声明  *****************************
void Timer_InterruptHandler(void *data, u8 TmrCtrNumber);
int SetUpInterruptSystem(XScuGic *XScuGicInstancePtr);
int ScuGicInterrupt_Init(u16 DeviceId, XTmrCtr *TimerInstancePtr);
// ------------------------------------------------------------------

void Timer_InterruptHandler(void *data, u8 TmrCtrNumber)
{
    print("\r\n");
    print("\r\n");
    print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n");
    print(" Inside Timer ISR \n \r ");

    XTmrCtr_Stop(data, TmrCtrNumber);
    // PS GPIO Writting

    print("LED 'PS-LED-1' Turned ON \r\n");

    XGpioPs_WritePin(&psGpioInstancePtr, iPsLed, 1);
    XTmrCtr_Reset(data, TmrCtrNumber);

    print(" Timer ISR Exit\n \n \r");
    print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n");
    print("\r\n");
    print("\r\n");

    InterruptFlag = 1;
}


int SetUpInterruptSystem(XScuGic *XScuGicInstancePtr)
{
    /*
	* Connect the interrupt controller interrupt handler to the hardware
	* interrupt handling logic in the ARM processor.
	*/
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
                                 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
                                 XScuGicInstancePtr);
    /*
* Enable interrupts in the ARM
*/
    Xil_ExceptionEnable();
    return XST_SUCCESS;
}


int ScuGicInterrupt_Init(u16 DeviceId, XTmrCtr *TimerInstancePtr)
{
    int Status;
    /*
* Initialize the interrupt controller driver so that it is ready to
* use.
* */
    GicConfig = XScuGic_LookupConfig(DeviceId);
    if (NULL == GicConfig)
    {
        return XST_FAILURE;
    }
    Status = XScuGic_CfgInitialize(&InterruptController, GicConfig,
                                   GicConfig->CpuBaseAddress);
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }
    /*
* Setup the Interrupt System
* */
    Status = SetUpInterruptSystem(&InterruptController);
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }
    /*
* Connect a device driver handler that will be called when an
* interrupt for the device occurs, the device driver handler performs
* the specific interrupt processing for the device
*/
    Status = XScuGic_Connect(&InterruptController,
                             XPAR_FABRIC_AXI_TIMER_0_INTERRUPT_INTR,
                             (Xil_ExceptionHandler)XTmrCtr_InterruptHandler,
                             (void *)TimerInstancePtr);
    if (Status != XST_SUCCESS)
    {
        return XST_FAILURE;
    }
    /*
* Enable the interrupt for the device and then cause (simulate) an
* interrupt so the handlers will be called
*/
    XScuGic_Enable(&InterruptController, XPAR_FABRIC_AXI_TIMER_0_INTERRUPT_INTR);
    return XST_SUCCESS;
}


int main()
{
    static XGpio GPIOInstance_Ptr;
    XGpioPs_Config *GpioConfigPtr;
    XTmrCtr TimerInstancePtr;
    int xStatus;
    u32 Readstatus = 0, OldReadStatus = 0;
    //u32 EffectiveAdress = 0xE000A000;
    int iPlKey1 = 54;
    u32 uPinDirectionEMIO = 0x0;
    // Input Pin
    // Pin direction
    u32 uPinDirection = 0x1;
    int exit_flag, choice, internal_choice;
    init_platform();
    /* data = *(u32 *)(0x42800004);
		print("OK \n");
		data = *(u32 *)(0x41200004);
		print("OK-1 \n");
	*/


    print("##### Application Starts #####\n\r");
    print("\r\n");
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //Step-1 :AXI GPIO Initialization
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    xStatus = XGpio_Initialize(&GPIOInstance_Ptr, XPAR_AXI_GPIO_0_DEVICE_ID);
    if (XST_SUCCESS != xStatus)
        print("GPIO INIT FAILED\n\r");


    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //Step-2 :AXI GPIO Set the Direction
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    XGpio_SetDataDirection(&GPIOInstance_Ptr, GPIO_CHANNEL_1, 1);


    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //Step-3 :AXI Timer Initialization
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    xStatus = XTmrCtr_Initialize(&TimerInstancePtr, XPAR_AXI_TIMER_0_DEVICE_ID);
    if (XST_SUCCESS != xStatus)
        print("TIMER INIT FAILED \n\r");


    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //Step-4 :Set Timer Handler
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    XTmrCtr_SetHandler(&TimerInstancePtr,
                       Timer_InterruptHandler,
                       &TimerInstancePtr);


    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //Step-5 :Setting timer Reset Value
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    XTmrCtr_SetResetValue(&TimerInstancePtr,
                          0, //Change with generic value
						  AXI_TIMER_RESET_VALUE);


    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //Step-6 :Setting timer Option (Interrupt Mode And Auto Reload )
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    XTmrCtr_SetOptions(&TimerInstancePtr,
                       XPAR_AXI_TIMER_0_DEVICE_ID,
                       (XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION));


    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //Step-7 :PS GPIO Intialization
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    GpioConfigPtr = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
    if (GpioConfigPtr == NULL)
        return XST_FAILURE;
    xStatus = XGpioPs_CfgInitialize(&psGpioInstancePtr,
                                    GpioConfigPtr,
                                    GpioConfigPtr->BaseAddr);
    if (XST_SUCCESS != xStatus)
        print(" PS GPIO INIT FAILED \n\r");


    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //Step-8 :PS GPIO pin setting to Output
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    XGpioPs_SetDirectionPin(&psGpioInstancePtr, iPsLed, uPinDirection);
    XGpioPs_SetOutputEnablePin(&psGpioInstancePtr, iPsLed, 1);


    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //Step-9 :EMIO PIN Setting to Input port
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    XGpioPs_SetDirectionPin(&psGpioInstancePtr,
                            iPlKey1, uPinDirectionEMIO);
    XGpioPs_SetOutputEnablePin(&psGpioInstancePtr, iPlKey1, 0);


    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //Step-10 : SCUGIC interrupt controller Intialization
    //Registration of the Timer ISR
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    xStatus =
        ScuGicInterrupt_Init(XPAR_PS7_SCUGIC_0_DEVICE_ID, &TimerInstancePtr);
    if (XST_SUCCESS != xStatus)
        print(" :( SCUGIC INIT FAILED \n\r");


    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //Step-11 :User selection procedure to select and execute tests
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    exit_flag = 0;
    while (exit_flag != 1)
    {
        print(" SELECT the Operation from the Below Menu \r\n");
        print("###################### Menu Starts ########################\r\n");
        print("Press '1' to use NORMAL GPIO as an input (PL-KEY-4 switch)\r\n");
        print("Press '2' to use EMIO as an input (PL-KEY-1 switch)\r\n");
        print("Press any other key to Exit\r\n");
        print(" ##################### Menu Ends #########################\r\n");

        choice = inbyte();
        printf("Selection : %c \r\n", choice);
        internal_choice = 1;
        switch (choice)
        {
        //~~~~~~~~~~~~~~~~~~~~~~~
        // Use case for AXI GPIO
        //~~~~~~~~~~~~~~~~~~~~~~~~
        case '1':
            exit_flag = 0;
            print("Press Switch 'PL-KEY-4' push button on board \r\n");
            print(" \r\n");
            while (internal_choice != '0')
            {
                Readstatus = XGpio_DiscreteRead(&GPIOInstance_Ptr, 1);
                if (1 == Readstatus && 0 == OldReadStatus)
                {
                    print("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\r\n");
                    print("PL-KEY-4 PUSH Button pressed \n\r");
                    print("LED 'PS-LED-1' Turned OFF \r\n");
                    XGpioPs_WritePin(&psGpioInstancePtr, iPsLed, 0);
                    //Start Timer
                    XTmrCtr_Start(&TimerInstancePtr, 0);
                    print("timer start \n\r");
                    //Wait For interrupt;
                    print("Wait for the Timer interrupt to tigger \r\n");
                    print("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\r\n");
                    print(" \r\n");
                    while (InterruptFlag != 1)
                        ;
                    InterruptFlag = 0;
                    print(" ###########################################\r\n ");
                    print("Press '0' to go to Main Menu \n\r ");
                    print("Press any other key to remain in AXI GPIO Test \n\r ");
                    print(" ###########################################\r\n ");
                    internal_choice = inbyte();
                    printf("Select = %c \r\n", internal_choice);
                    if (internal_choice != '0')
                    {
                        print("Press Switch 'PL-KEY-4' push button on board \r\n");
                    }
                }
                OldReadStatus = Readstatus;
            }
            print(" \r\n");
            print(" \r\n");
            break;
        case '2':
            //~~~~~~~~~~~~~~~~~~~~~~~
            //Usecase for PS GPIO
            //~~~~~~~~~~~~~~~~~~~~~~~~
            exit_flag = 0;
            print("Press Switch 'PL-KEY-1' push button on board \r\n");
            print(" \r\n");
            while (internal_choice != '0')
            {
                Readstatus = XGpioPs_ReadPin(&psGpioInstancePtr,
                                             iPlKey1);
                if (1 == Readstatus && 0 == OldReadStatus)
                {
                    print("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\r\n");
                    print("PL-KEY-1 PUSH Button pressed \n\r");
                    print("LED 'PS-LED-1' Turned OFF \r\n");
                    XGpioPs_WritePin(&psGpioInstancePtr, iPsLed, 0);

                    //Start Timer
                    XTmrCtr_Start(&TimerInstancePtr, 0);
                    print("timer start \n\r");

                    //Wait For interrupt;
                    print("Wait for the Timer interrupt to tigger \r\n");
                    print("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\r\n");
                    print(" \r\n");
                    while (InterruptFlag != 1)
                        ;
                    InterruptFlag = 0;
                    print(" ###########################################\r\n ");
                    print("Press '0' to go to Main Menu \n\r ");
                    print("Press any other key to remain in EMIO Test \n\r ");
                    print(" ###########################################\r\n ");
                    internal_choice = inbyte();
                    printf("Select = %c \r\n", internal_choice);
                    if (internal_choice != '0')
                    {
                        print("Press Switch 'PL-KEY-1' push button on board \r\n");
                    }
                }
                OldReadStatus = Readstatus;
            }
            print(" \r\n");
            print(" \r\n");
            break;
        default:
            exit_flag = 1;
            break;
        }
    }

    print("\r\n");
    print("***********\r\n");
    print("BYE \r\n");
    print("***********\r\n");

    cleanup_platform();
    return 0;
}
