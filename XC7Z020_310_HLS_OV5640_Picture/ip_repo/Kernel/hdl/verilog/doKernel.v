// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="doKernel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-2,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.753000,HLS_SYN_LAT=7077891,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=1,HLS_SYN_FF=872,HLS_SYN_LUT=1555,HLS_VERSION=2018_3}" *)

module doKernel (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt,
        s_axi_KERNEL_BUS_AWVALID,
        s_axi_KERNEL_BUS_AWREADY,
        s_axi_KERNEL_BUS_AWADDR,
        s_axi_KERNEL_BUS_WVALID,
        s_axi_KERNEL_BUS_WREADY,
        s_axi_KERNEL_BUS_WDATA,
        s_axi_KERNEL_BUS_WSTRB,
        s_axi_KERNEL_BUS_ARVALID,
        s_axi_KERNEL_BUS_ARREADY,
        s_axi_KERNEL_BUS_ARADDR,
        s_axi_KERNEL_BUS_RVALID,
        s_axi_KERNEL_BUS_RREADY,
        s_axi_KERNEL_BUS_RDATA,
        s_axi_KERNEL_BUS_RRESP,
        s_axi_KERNEL_BUS_BVALID,
        s_axi_KERNEL_BUS_BREADY,
        s_axi_KERNEL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_pp0_stage0 = 11'd2;
parameter    ap_ST_fsm_pp0_stage1 = 11'd4;
parameter    ap_ST_fsm_pp0_stage2 = 11'd8;
parameter    ap_ST_fsm_pp0_stage3 = 11'd16;
parameter    ap_ST_fsm_pp0_stage4 = 11'd32;
parameter    ap_ST_fsm_pp0_stage5 = 11'd64;
parameter    ap_ST_fsm_pp0_stage6 = 11'd128;
parameter    ap_ST_fsm_pp0_stage7 = 11'd256;
parameter    ap_ST_fsm_pp0_stage8 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_KERNEL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_KERNEL_BUS_ADDR_WIDTH = 5;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_KERNEL_BUS_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [2:0] inStream_TKEEP;
input  [2:0] inStream_TSTRB;
input  [0:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [0:0] inStream_TID;
input  [0:0] inStream_TDEST;
output  [23:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [2:0] outStream_TKEEP;
output  [2:0] outStream_TSTRB;
output  [0:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [0:0] outStream_TID;
output  [0:0] outStream_TDEST;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;
input   s_axi_KERNEL_BUS_AWVALID;
output   s_axi_KERNEL_BUS_AWREADY;
input  [C_S_AXI_KERNEL_BUS_ADDR_WIDTH - 1:0] s_axi_KERNEL_BUS_AWADDR;
input   s_axi_KERNEL_BUS_WVALID;
output   s_axi_KERNEL_BUS_WREADY;
input  [C_S_AXI_KERNEL_BUS_DATA_WIDTH - 1:0] s_axi_KERNEL_BUS_WDATA;
input  [C_S_AXI_KERNEL_BUS_WSTRB_WIDTH - 1:0] s_axi_KERNEL_BUS_WSTRB;
input   s_axi_KERNEL_BUS_ARVALID;
output   s_axi_KERNEL_BUS_ARREADY;
input  [C_S_AXI_KERNEL_BUS_ADDR_WIDTH - 1:0] s_axi_KERNEL_BUS_ARADDR;
output   s_axi_KERNEL_BUS_RVALID;
input   s_axi_KERNEL_BUS_RREADY;
output  [C_S_AXI_KERNEL_BUS_DATA_WIDTH - 1:0] s_axi_KERNEL_BUS_RDATA;
output  [1:0] s_axi_KERNEL_BUS_RRESP;
output   s_axi_KERNEL_BUS_BVALID;
input   s_axi_KERNEL_BUS_BREADY;
output  [1:0] s_axi_KERNEL_BUS_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [23:0] inStream_V_data_V_0_data_out;
wire    inStream_V_data_V_0_vld_in;
wire    inStream_V_data_V_0_vld_out;
wire    inStream_V_data_V_0_ack_in;
reg    inStream_V_data_V_0_ack_out;
reg   [23:0] inStream_V_data_V_0_payload_A;
reg   [23:0] inStream_V_data_V_0_payload_B;
reg    inStream_V_data_V_0_sel_rd;
reg    inStream_V_data_V_0_sel_wr;
wire    inStream_V_data_V_0_sel;
wire    inStream_V_data_V_0_load_A;
wire    inStream_V_data_V_0_load_B;
reg   [1:0] inStream_V_data_V_0_state;
wire    inStream_V_data_V_0_state_cmp_full;
reg   [2:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [2:0] inStream_V_keep_V_0_payload_A;
reg   [2:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [2:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [2:0] inStream_V_strb_V_0_payload_A;
reg   [2:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [0:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [0:0] inStream_V_user_V_0_payload_A;
reg   [0:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [0:0] inStream_V_last_V_0_data_out;
wire    inStream_V_last_V_0_vld_in;
wire    inStream_V_last_V_0_vld_out;
wire    inStream_V_last_V_0_ack_in;
reg    inStream_V_last_V_0_ack_out;
reg   [0:0] inStream_V_last_V_0_payload_A;
reg   [0:0] inStream_V_last_V_0_payload_B;
reg    inStream_V_last_V_0_sel_rd;
reg    inStream_V_last_V_0_sel_wr;
wire    inStream_V_last_V_0_sel;
wire    inStream_V_last_V_0_load_A;
wire    inStream_V_last_V_0_load_B;
reg   [1:0] inStream_V_last_V_0_state;
wire    inStream_V_last_V_0_state_cmp_full;
reg   [0:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [0:0] inStream_V_id_V_0_payload_A;
reg   [0:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [0:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [0:0] inStream_V_dest_V_0_payload_A;
reg   [0:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [23:0] outStream_V_data_V_1_data_in;
reg   [23:0] outStream_V_data_V_1_data_out;
reg    outStream_V_data_V_1_vld_in;
wire    outStream_V_data_V_1_vld_out;
wire    outStream_V_data_V_1_ack_in;
wire    outStream_V_data_V_1_ack_out;
reg   [23:0] outStream_V_data_V_1_payload_A;
reg   [23:0] outStream_V_data_V_1_payload_B;
reg    outStream_V_data_V_1_sel_rd;
reg    outStream_V_data_V_1_sel_wr;
wire    outStream_V_data_V_1_sel;
wire    outStream_V_data_V_1_load_A;
wire    outStream_V_data_V_1_load_B;
reg   [1:0] outStream_V_data_V_1_state;
wire    outStream_V_data_V_1_state_cmp_full;
reg   [2:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [2:0] outStream_V_keep_V_1_payload_A;
reg   [2:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [2:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [2:0] outStream_V_strb_V_1_payload_A;
reg   [2:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [0:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [0:0] outStream_V_user_V_1_payload_A;
reg   [0:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [0:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [0:0] outStream_V_id_V_1_payload_A;
reg   [0:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [0:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [0:0] outStream_V_dest_V_1_payload_A;
reg   [0:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
reg   [3:0] kernel_address0;
reg    kernel_ce0;
wire   [7:0] kernel_q0;
wire   [31:0] operation;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond_flatten_reg_1386;
reg    outStream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] or_cond_reg_1425;
reg   [0:0] or_cond_reg_1425_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
reg   [19:0] indvar_flatten_reg_424;
reg   [9:0] i_reg_435;
reg   [10:0] col_assign_reg_446;
reg   [7:0] reg_457;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
reg    ap_block_state12_io;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_state5_pp0_stage3_iter0;
reg    ap_predicate_op158_write_state5;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage3_11001;
wire   [7:0] lineBuf_val_1_q0;
reg   [7:0] reg_461;
wire   [7:0] lineBuf_val_1_q1;
wire    ap_block_state6_pp0_stage4_iter0;
reg    ap_predicate_op171_write_state6;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage4_11001;
wire   [0:0] sel_tmp_fu_466_p2;
reg   [0:0] sel_tmp_reg_1371;
wire   [0:0] sel_tmp2_fu_472_p2;
reg   [0:0] sel_tmp2_reg_1376;
wire   [0:0] sel_tmp4_fu_478_p2;
reg   [0:0] sel_tmp4_reg_1381;
wire   [0:0] exitcond_flatten_fu_489_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
reg    ap_block_state11_io;
reg    ap_block_pp0_stage0_11001;
wire   [19:0] indvar_flatten_next_fu_495_p2;
reg   [19:0] indvar_flatten_next_reg_1390;
wire   [0:0] exitcond_fu_501_p2;
reg   [0:0] exitcond_reg_1395;
wire   [10:0] col_assign_mid2_fu_507_p3;
reg   [10:0] col_assign_mid2_reg_1400;
wire   [9:0] i_mid2_fu_561_p3;
reg   [9:0] i_mid2_reg_1405;
wire   [63:0] tmp_7_fu_569_p1;
reg   [63:0] tmp_7_reg_1410;
reg   [9:0] lineBuf_val_1_addr_reg_1415;
reg   [9:0] lineBuf_val_2_addr_reg_1420;
wire   [0:0] or_cond_fu_591_p2;
reg   [2:0] dataOutChannel_keep_s_reg_1429;
reg   [2:0] dataOutChannel_strb_s_reg_1434;
reg   [0:0] dataOutChannel_user_s_reg_1439;
reg   [0:0] dataOutChannel_last_s_reg_1444;
reg   [0:0] dataOutChannel_id_V_reg_1449;
reg   [0:0] dataOutChannel_dest_s_reg_1454;
wire   [31:0] pixConvolved_1_mid2_fu_716_p3;
reg   [31:0] pixConvolved_1_mid2_reg_1459;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] kernel_load_1_reg_1475;
wire   [15:0] window_val_0_0_fu_756_p2;
reg   [15:0] window_val_0_0_reg_1500;
wire   [15:0] window_val_0_1_fu_769_p2;
reg   [15:0] window_val_0_1_reg_1506;
reg   [7:0] lineBuf_val_1_load_2_reg_1517;
wire   [7:0] lineBuf_val_2_q0;
reg   [7:0] lineBuf_val_2_load_1_reg_1527;
wire   [7:0] lineBuf_val_2_q1;
reg   [7:0] lineBuf_val_2_load_2_reg_1532;
wire   [15:0] window_val_0_2_fu_799_p2;
reg   [15:0] window_val_0_2_reg_1542;
wire   [15:0] window_val_1_0_fu_813_p2;
reg   [15:0] window_val_1_0_reg_1548;
reg   [7:0] lineBuf_val_2_load_3_reg_1554;
wire   [15:0] window_val_1_1_fu_826_p2;
reg   [15:0] window_val_1_1_reg_1559;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [15:0] window_val_1_2_fu_840_p2;
reg   [15:0] window_val_1_2_reg_1565;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [15:0] window_val_2_0_fu_853_p2;
reg   [15:0] window_val_2_0_reg_1571;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [15:0] tmp1_fu_872_p2;
reg   [15:0] tmp1_reg_1577;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire   [15:0] tmp2_fu_877_p2;
reg   [15:0] tmp2_reg_1582;
wire   [15:0] tmp8_fu_889_p2;
reg   [15:0] tmp8_reg_1587;
wire   [14:0] tmp_15_fu_893_p1;
reg   [14:0] tmp_15_reg_1592;
wire   [14:0] tmp_10_fu_897_p2;
reg   [14:0] tmp_10_reg_1597;
wire   [7:0] valInWindow_0_minVal_6_fu_1018_p3;
reg   [7:0] valInWindow_0_minVal_6_reg_1602;
wire   [7:0] valInWindow_0_maxVal_6_fu_1116_p3;
reg   [7:0] valInWindow_0_maxVal_6_reg_1608;
wire   [10:0] j_fu_1124_p2;
reg   [10:0] j_reg_1614;
wire   [23:0] dataOutChannel_data_s_fu_1291_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage1_subdone;
reg   [9:0] lineBuf_val_0_address0;
reg    lineBuf_val_0_ce0;
reg    lineBuf_val_0_we0;
wire   [7:0] lineBuf_val_0_q0;
reg   [9:0] lineBuf_val_0_address1;
reg    lineBuf_val_0_ce1;
wire   [7:0] lineBuf_val_0_q1;
reg   [9:0] lineBuf_val_1_address0;
reg    lineBuf_val_1_ce0;
reg    lineBuf_val_1_we0;
reg   [9:0] lineBuf_val_1_address1;
reg    lineBuf_val_1_ce1;
reg   [9:0] lineBuf_val_2_address0;
reg    lineBuf_val_2_ce0;
reg    lineBuf_val_2_we0;
wire   [7:0] lineBuf_val_2_d0;
reg   [9:0] lineBuf_val_2_address1;
reg    lineBuf_val_2_ce1;
reg   [19:0] ap_phi_mux_indvar_flatten_phi_fu_428_p4;
reg   [9:0] ap_phi_mux_i_phi_fu_439_p4;
reg   [10:0] ap_phi_mux_col_assign_phi_fu_450_p4;
wire   [63:0] tmp_9_fu_723_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_40_0_1_fu_736_p1;
wire   [63:0] tmp_40_0_2_fu_780_p1;
reg   [31:0] pixConvolved_1_fu_164;
wire   [31:0] pixConvolved_fu_730_p2;
reg   [15:0] valOut_1_fu_168;
wire  signed [15:0] valOut_3_fu_1254_p3;
wire    ap_block_pp0_stage3_01001;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage8;
wire   [9:0] i_s_fu_515_p2;
wire   [8:0] tmp_fu_521_p4;
wire   [8:0] tmp_5_fu_537_p4;
wire   [0:0] icmp_fu_531_p2;
wire   [0:0] icmp1_fu_547_p2;
wire   [9:0] tmp_11_fu_575_p4;
wire   [0:0] tmp_mid2_fu_553_p3;
wire   [0:0] icmp2_fu_585_p2;
wire   [7:0] R_fu_625_p1;
wire   [7:0] tmp_4_fu_643_p1;
wire   [7:0] G_fu_629_p4;
wire   [7:0] tmp_2_fu_653_p4;
wire   [12:0] p_shl_fu_663_p3;
wire   [8:0] p_shl5_fu_675_p3;
wire   [13:0] p_shl_cast_fu_671_p1;
wire   [13:0] p_shl5_cast_fu_683_p1;
wire   [13:0] tmp_8_fu_687_p2;
wire   [15:0] grp_fu_1303_p3;
wire  signed [15:0] tmp_8_cast_fu_693_p1;
(* use_dsp48 = "no" *) wire   [15:0] tmp_3_fu_697_p2;
wire   [7:0] window_val_0_0_fu_756_p0;
wire  signed [7:0] window_val_0_0_fu_756_p1;
wire   [7:0] window_val_0_1_fu_769_p0;
wire  signed [7:0] window_val_0_1_fu_769_p1;
wire   [31:0] col_assign_1_0_2_fu_775_p2;
wire   [7:0] window_val_0_2_fu_799_p0;
wire  signed [7:0] window_val_0_2_fu_799_p1;
wire   [7:0] window_val_1_0_fu_813_p0;
wire  signed [7:0] window_val_1_0_fu_813_p1;
wire   [7:0] window_val_1_1_fu_826_p0;
wire  signed [7:0] window_val_1_1_fu_826_p1;
wire   [7:0] window_val_1_2_fu_840_p0;
wire  signed [7:0] window_val_1_2_fu_840_p1;
wire   [7:0] window_val_2_0_fu_853_p0;
wire  signed [7:0] window_val_2_0_fu_853_p1;
wire   [7:0] window_val_2_1_fu_866_p0;
wire  signed [7:0] window_val_2_1_fu_866_p1;
wire   [15:0] window_val_2_1_fu_866_p2;
wire   [14:0] tmp_13_fu_885_p1;
wire   [14:0] tmp_12_fu_881_p1;
wire   [7:0] tmp_22_fu_906_p1;
wire   [7:0] tmp_21_fu_903_p1;
wire   [0:0] tmp_5_0_1_i_fu_909_p2;
wire   [7:0] tmp_23_fu_923_p1;
wire   [7:0] valInWindow_0_minVal_fu_915_p3;
wire   [0:0] tmp_5_0_2_i_fu_926_p2;
wire   [7:0] tmp_24_fu_940_p1;
wire   [7:0] valInWindow_0_minVal_1_fu_932_p3;
wire   [0:0] tmp_5_1_i_fu_943_p2;
wire   [7:0] tmp_25_fu_957_p1;
wire   [7:0] valInWindow_0_minVal_2_fu_949_p3;
wire   [0:0] tmp_5_1_1_i_fu_960_p2;
wire   [7:0] tmp_26_fu_974_p1;
wire   [7:0] valInWindow_0_minVal_3_fu_966_p3;
wire   [0:0] tmp_5_1_2_i_fu_977_p2;
wire   [7:0] tmp_27_fu_991_p1;
wire   [7:0] valInWindow_0_minVal_4_fu_983_p3;
wire   [0:0] tmp_5_2_i_fu_994_p2;
wire   [7:0] tmp_28_fu_1008_p1;
wire   [7:0] valInWindow_0_minVal_5_fu_1000_p3;
wire   [0:0] tmp_5_2_1_i_fu_1012_p2;
wire   [0:0] tmp_11_0_1_i_fu_1026_p2;
wire   [7:0] valInWindow_0_maxVal_fu_1032_p3;
wire   [0:0] tmp_11_0_2_i_fu_1040_p2;
wire   [7:0] valInWindow_0_maxVal_1_fu_1046_p3;
wire   [0:0] tmp_11_1_i_fu_1054_p2;
wire   [7:0] valInWindow_0_maxVal_2_fu_1060_p3;
wire   [0:0] tmp_11_1_1_i_fu_1068_p2;
wire   [7:0] valInWindow_0_maxVal_3_fu_1074_p3;
wire   [0:0] tmp_11_1_2_i_fu_1082_p2;
wire   [7:0] valInWindow_0_maxVal_4_fu_1088_p3;
wire   [0:0] tmp_11_2_i_fu_1096_p2;
wire   [7:0] valInWindow_0_maxVal_5_fu_1102_p3;
wire   [0:0] tmp_11_2_1_i_fu_1110_p2;
wire   [7:0] window_val_2_2_fu_1136_p0;
wire  signed [7:0] window_val_2_2_fu_1136_p1;
wire   [15:0] window_val_2_2_fu_1136_p2;
wire   [15:0] tmp9_fu_1149_p2;
wire   [15:0] tmp10_fu_1154_p2;
wire   [14:0] tmp_14_fu_1159_p1;
wire   [15:0] tmp11_fu_1163_p2;
wire   [15:0] tmp7_fu_1145_p2;
wire   [14:0] tmp_19_fu_1168_p2;
wire   [15:0] valOut_fu_1173_p2;
wire   [0:0] tmp_20_fu_1184_p3;
wire   [14:0] valOut_2_cast_fu_1179_p2;
wire   [14:0] p_s_fu_1192_p3;
wire   [7:0] tmp_29_fu_1204_p1;
wire   [0:0] tmp_5_2_2_i_fu_1208_p2;
wire   [7:0] valInWindow_0_minVal_7_fu_1213_p3;
wire   [0:0] tmp_11_2_2_i_fu_1224_p2;
wire   [7:0] valInWindow_0_maxVal_7_fu_1229_p3;
wire   [15:0] valOut_4_fu_1236_p1;
wire   [15:0] valOut_2_fu_1220_p1;
wire   [15:0] valOut_5_fu_1240_p3;
wire   [15:0] p_cast_fu_1200_p1;
wire   [15:0] valOut_6_fu_1247_p3;
wire   [7:0] tmp_30_fu_1261_p1;
wire   [23:0] tmp_17_fu_1273_p3;
wire  signed [23:0] tmp_18_fu_1281_p1;
wire   [23:0] tmp20_fu_1285_p2;
wire   [23:0] tmp_16_fu_1265_p3;
wire   [8:0] grp_fu_1303_p0;
wire   [7:0] grp_fu_1303_p1;
wire   [15:0] grp_fu_1303_p2;
wire    ap_CS_fsm_state13;
reg    ap_block_state13;
reg   [10:0] ap_NS_fsm;
wire    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] grp_fu_1303_p10;
wire   [15:0] tmp_4_fu_643_p10;
wire   [15:0] window_val_0_0_fu_756_p00;
wire   [15:0] window_val_0_1_fu_769_p00;
wire   [15:0] window_val_0_2_fu_799_p00;
wire   [15:0] window_val_1_0_fu_813_p00;
wire   [15:0] window_val_1_1_fu_826_p00;
wire   [15:0] window_val_1_2_fu_840_p00;
wire   [15:0] window_val_2_0_fu_853_p00;
wire   [15:0] window_val_2_1_fu_866_p00;
wire   [15:0] window_val_2_2_fu_1136_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 inStream_V_data_V_0_sel_rd = 1'b0;
#0 inStream_V_data_V_0_sel_wr = 1'b0;
#0 inStream_V_data_V_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_last_V_0_sel_rd = 1'b0;
#0 inStream_V_last_V_0_sel_wr = 1'b0;
#0 inStream_V_last_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_V_1_sel_rd = 1'b0;
#0 outStream_V_data_V_1_sel_wr = 1'b0;
#0 outStream_V_data_V_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

doKernel_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
doKernel_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .operation(operation)
);

doKernel_KERNEL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_KERNEL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_KERNEL_BUS_DATA_WIDTH ))
doKernel_KERNEL_BUS_s_axi_U(
    .AWVALID(s_axi_KERNEL_BUS_AWVALID),
    .AWREADY(s_axi_KERNEL_BUS_AWREADY),
    .AWADDR(s_axi_KERNEL_BUS_AWADDR),
    .WVALID(s_axi_KERNEL_BUS_WVALID),
    .WREADY(s_axi_KERNEL_BUS_WREADY),
    .WDATA(s_axi_KERNEL_BUS_WDATA),
    .WSTRB(s_axi_KERNEL_BUS_WSTRB),
    .ARVALID(s_axi_KERNEL_BUS_ARVALID),
    .ARREADY(s_axi_KERNEL_BUS_ARREADY),
    .ARADDR(s_axi_KERNEL_BUS_ARADDR),
    .RVALID(s_axi_KERNEL_BUS_RVALID),
    .RREADY(s_axi_KERNEL_BUS_RREADY),
    .RDATA(s_axi_KERNEL_BUS_RDATA),
    .RRESP(s_axi_KERNEL_BUS_RRESP),
    .BVALID(s_axi_KERNEL_BUS_BVALID),
    .BREADY(s_axi_KERNEL_BUS_BREADY),
    .BRESP(s_axi_KERNEL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .kernel_address0(kernel_address0),
    .kernel_ce0(kernel_ce0),
    .kernel_q0(kernel_q0)
);

doKernel_lineBuf_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
lineBuf_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuf_val_0_address0),
    .ce0(lineBuf_val_0_ce0),
    .we0(lineBuf_val_0_we0),
    .d0(lineBuf_val_1_q0),
    .q0(lineBuf_val_0_q0),
    .address1(lineBuf_val_0_address1),
    .ce1(lineBuf_val_0_ce1),
    .q1(lineBuf_val_0_q1)
);

doKernel_lineBuf_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
lineBuf_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuf_val_1_address0),
    .ce0(lineBuf_val_1_ce0),
    .we0(lineBuf_val_1_we0),
    .d0(lineBuf_val_2_q0),
    .q0(lineBuf_val_1_q0),
    .address1(lineBuf_val_1_address1),
    .ce1(lineBuf_val_1_ce1),
    .q1(lineBuf_val_1_q1)
);

doKernel_lineBuf_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
lineBuf_val_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuf_val_2_address0),
    .ce0(lineBuf_val_2_ce0),
    .we0(lineBuf_val_2_we0),
    .d0(lineBuf_val_2_d0),
    .q0(lineBuf_val_2_q0),
    .address1(lineBuf_val_2_address1),
    .ce1(lineBuf_val_2_ce1),
    .q1(lineBuf_val_2_q1)
);

doKernel_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
doKernel_mac_mulaeOg_U1(
    .din0(grp_fu_1303_p0),
    .din1(grp_fu_1303_p1),
    .din2(grp_fu_1303_p2),
    .dout(grp_fu_1303_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
            inStream_V_data_V_0_sel_rd <= ~inStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_in == 1'b1) & (inStream_V_data_V_0_vld_in == 1'b1))) begin
            inStream_V_data_V_0_sel_wr <= ~inStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_V_0_state == 2'd2) & (inStream_V_data_V_0_vld_in == 1'b0)) | ((inStream_V_data_V_0_state == 2'd3) & (inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd2;
        end else if ((((inStream_V_data_V_0_state == 2'd1) & (inStream_V_data_V_0_ack_out == 1'b0)) | ((inStream_V_data_V_0_state == 2'd3) & (inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd1;
        end else if (((~((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)) & ~((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)) & (inStream_V_data_V_0_state == 2'd3)) | ((inStream_V_data_V_0_state == 2'd1) & (inStream_V_data_V_0_ack_out == 1'b1)) | ((inStream_V_data_V_0_state == 2'd2) & (inStream_V_data_V_0_vld_in == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd3;
        end else begin
            inStream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b1)) | ((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b1)) | ((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b1)) | ((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_last_V_0_ack_out == 1'b1) & (inStream_V_last_V_0_vld_out == 1'b1))) begin
            inStream_V_last_V_0_sel_rd <= ~inStream_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_last_V_0_ack_in == 1'b1) & (inStream_V_last_V_0_vld_in == 1'b1))) begin
            inStream_V_last_V_0_sel_wr <= ~inStream_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_last_V_0_state == 2'd2) & (inStream_V_last_V_0_vld_in == 1'b0)) | ((inStream_V_last_V_0_state == 2'd3) & (inStream_V_last_V_0_vld_in == 1'b0) & (inStream_V_last_V_0_ack_out == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd2;
        end else if ((((inStream_V_last_V_0_state == 2'd1) & (inStream_V_last_V_0_ack_out == 1'b0)) | ((inStream_V_last_V_0_state == 2'd3) & (inStream_V_last_V_0_ack_out == 1'b0) & (inStream_V_last_V_0_vld_in == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd1;
        end else if (((~((inStream_V_last_V_0_vld_in == 1'b0) & (inStream_V_last_V_0_ack_out == 1'b1)) & ~((inStream_V_last_V_0_ack_out == 1'b0) & (inStream_V_last_V_0_vld_in == 1'b1)) & (inStream_V_last_V_0_state == 2'd3)) | ((inStream_V_last_V_0_state == 2'd1) & (inStream_V_last_V_0_ack_out == 1'b1)) | ((inStream_V_last_V_0_state == 2'd2) & (inStream_V_last_V_0_vld_in == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd3;
        end else begin
            inStream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b1)) | ((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b1)) | ((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_vld_out == 1'b1))) begin
            outStream_V_data_V_1_sel_rd <= ~outStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_in == 1'b1) & (outStream_V_data_V_1_vld_in == 1'b1))) begin
            outStream_V_data_V_1_sel_wr <= ~outStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_V_1_state == 2'd2) & (outStream_V_data_V_1_vld_in == 1'b0)) | ((outStream_V_data_V_1_state == 2'd3) & (outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd2;
        end else if ((((outStream_V_data_V_1_state == 2'd1) & (outStream_V_data_V_1_ack_out == 1'b0)) | ((outStream_V_data_V_1_state == 2'd3) & (outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd1;
        end else if (((~((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)) & ~((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)) & (outStream_V_data_V_1_state == 2'd3)) | ((outStream_V_data_V_1_state == 2'd1) & (outStream_V_data_V_1_ack_out == 1'b1)) | ((outStream_V_data_V_1_state == 2'd2) & (outStream_V_data_V_1_vld_in == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd3;
        end else begin
            outStream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b1)) | ((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b1)) | ((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b1)) | ((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b1)) | ((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b1)) | ((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b1)) | ((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_assign_reg_446 <= j_reg_1614;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_assign_reg_446 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_435 <= i_mid2_reg_1405;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_435 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_424 <= indvar_flatten_next_reg_1390;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_424 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_1425 == 1'd0) & (exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        pixConvolved_1_fu_164 <= pixConvolved_1_mid2_reg_1459;
    end else if (((or_cond_reg_1425 == 1'd1) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        pixConvolved_1_fu_164 <= pixConvolved_fu_730_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pixConvolved_1_fu_164 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            reg_461 <= lineBuf_val_1_q1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
            reg_461 <= lineBuf_val_1_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_489_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_assign_mid2_reg_1400 <= col_assign_mid2_fu_507_p3;
        exitcond_reg_1395 <= exitcond_fu_501_p2;
        lineBuf_val_1_addr_reg_1415 <= tmp_7_fu_569_p1;
        lineBuf_val_2_addr_reg_1420 <= tmp_7_fu_569_p1;
        or_cond_reg_1425 <= or_cond_fu_591_p2;
        tmp_7_reg_1410[10 : 0] <= tmp_7_fu_569_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataOutChannel_dest_s_reg_1454 <= inStream_V_dest_V_0_data_out;
        dataOutChannel_id_V_reg_1449 <= inStream_V_id_V_0_data_out;
        dataOutChannel_keep_s_reg_1429 <= inStream_V_keep_V_0_data_out;
        dataOutChannel_last_s_reg_1444 <= inStream_V_last_V_0_data_out;
        dataOutChannel_strb_s_reg_1434 <= inStream_V_strb_V_0_data_out;
        dataOutChannel_user_s_reg_1439 <= inStream_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_1386 <= exitcond_flatten_fu_489_p2;
        or_cond_reg_1425_pp0_iter1_reg <= or_cond_reg_1425;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_489_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_mid2_reg_1405 <= i_mid2_fu_561_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_A == 1'b1)) begin
        inStream_V_data_V_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_B == 1'b1)) begin
        inStream_V_data_V_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_last_V_0_load_A == 1'b1)) begin
        inStream_V_last_V_0_payload_A <= inStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_last_V_0_load_B == 1'b1)) begin
        inStream_V_last_V_0_payload_B <= inStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_1390 <= indvar_flatten_next_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        j_reg_1614 <= j_fu_1124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        kernel_load_1_reg_1475 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        lineBuf_val_1_load_2_reg_1517 <= lineBuf_val_1_q1;
        lineBuf_val_2_load_1_reg_1527 <= lineBuf_val_2_q0;
        lineBuf_val_2_load_2_reg_1532 <= lineBuf_val_2_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        lineBuf_val_2_load_3_reg_1554 <= lineBuf_val_2_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_A == 1'b1)) begin
        outStream_V_data_V_1_payload_A <= outStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_B == 1'b1)) begin
        outStream_V_data_V_1_payload_B <= outStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= dataOutChannel_dest_s_reg_1454;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= dataOutChannel_dest_s_reg_1454;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= dataOutChannel_id_V_reg_1449;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= dataOutChannel_id_V_reg_1449;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= dataOutChannel_keep_s_reg_1429;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= dataOutChannel_keep_s_reg_1429;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= dataOutChannel_last_s_reg_1444;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= dataOutChannel_last_s_reg_1444;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= dataOutChannel_strb_s_reg_1434;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= dataOutChannel_strb_s_reg_1434;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= dataOutChannel_user_s_reg_1439;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= dataOutChannel_user_s_reg_1439;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        pixConvolved_1_mid2_reg_1459 <= pixConvolved_1_mid2_fu_716_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_457 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sel_tmp2_reg_1376 <= sel_tmp2_fu_472_p2;
        sel_tmp4_reg_1381 <= sel_tmp4_fu_478_p2;
        sel_tmp_reg_1371 <= sel_tmp_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_1425 == 1'd1) & (sel_tmp4_reg_1381 == 1'd1) & (exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        tmp1_reg_1577 <= tmp1_fu_872_p2;
        tmp2_reg_1582 <= tmp2_fu_877_p2;
        tmp8_reg_1587 <= tmp8_fu_889_p2;
        tmp_10_reg_1597 <= tmp_10_fu_897_p2;
        tmp_15_reg_1592 <= tmp_15_fu_893_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_1425 == 1'd1) & (sel_tmp_reg_1371 == 1'd1) & (exitcond_flatten_reg_1386 == 1'd0) & (sel_tmp4_reg_1381 == 1'd0) & (sel_tmp2_reg_1376 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        valInWindow_0_maxVal_6_reg_1608 <= valInWindow_0_maxVal_6_fu_1116_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_1425 == 1'd1) & (sel_tmp2_reg_1376 == 1'd1) & (exitcond_flatten_reg_1386 == 1'd0) & (sel_tmp4_reg_1381 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        valInWindow_0_minVal_6_reg_1602 <= valInWindow_0_minVal_6_fu_1018_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_1425 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        valOut_1_fu_168 <= valOut_3_fu_1254_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        window_val_0_0_reg_1500 <= window_val_0_0_fu_756_p2;
        window_val_0_1_reg_1506 <= window_val_0_1_fu_769_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        window_val_0_2_reg_1542 <= window_val_0_2_fu_799_p2;
        window_val_1_0_reg_1548 <= window_val_1_0_fu_813_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        window_val_1_1_reg_1559 <= window_val_1_1_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        window_val_1_2_reg_1565 <= window_val_1_2_fu_840_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        window_val_2_0_reg_1571 <= window_val_2_0_fu_853_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_489_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (outStream_V_dest_V_1_state[1'd0] == 1'b0) & (outStream_V_id_V_1_state[1'd0] == 1'b0) & (outStream_V_last_V_1_state[1'd0] == 1'b0) & (outStream_V_user_V_1_state[1'd0] == 1'b0) & (outStream_V_strb_V_1_state[1'd0] == 1'b0) & (outStream_V_keep_V_1_state[1'd0] == 1'b0) & (outStream_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_col_assign_phi_fu_450_p4 = j_reg_1614;
    end else begin
        ap_phi_mux_col_assign_phi_fu_450_p4 = col_assign_reg_446;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_439_p4 = i_mid2_reg_1405;
    end else begin
        ap_phi_mux_i_phi_fu_439_p4 = i_reg_435;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_428_p4 = indvar_flatten_next_reg_1390;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_428_p4 = indvar_flatten_reg_424;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (outStream_V_dest_V_1_state[1'd0] == 1'b0) & (outStream_V_id_V_1_state[1'd0] == 1'b0) & (outStream_V_last_V_1_state[1'd0] == 1'b0) & (outStream_V_user_V_1_state[1'd0] == 1'b0) & (outStream_V_strb_V_1_state[1'd0] == 1'b0) & (outStream_V_keep_V_1_state[1'd0] == 1'b0) & (outStream_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_TDATA_blk_n = inStream_V_data_V_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_V_0_sel == 1'b1)) begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B;
    end else begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_last_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_last_V_0_sel == 1'b1)) begin
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_B;
    end else begin
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            kernel_address0 = 64'd8;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
            kernel_address0 = 64'd7;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            kernel_address0 = 64'd6;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            kernel_address0 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            kernel_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address0 = 64'd3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            kernel_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_address0 = 64'd0;
        end else begin
            kernel_address0 = 'bx;
        end
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            lineBuf_val_0_address0 = tmp_9_fu_723_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lineBuf_val_0_address0 = tmp_7_reg_1410;
        end else begin
            lineBuf_val_0_address0 = 'bx;
        end
    end else begin
        lineBuf_val_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            lineBuf_val_0_address1 = tmp_40_0_2_fu_780_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            lineBuf_val_0_address1 = tmp_40_0_1_fu_736_p1;
        end else begin
            lineBuf_val_0_address1 = 'bx;
        end
    end else begin
        lineBuf_val_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuf_val_0_ce0 = 1'b1;
    end else begin
        lineBuf_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuf_val_0_ce1 = 1'b1;
    end else begin
        lineBuf_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lineBuf_val_0_we0 = 1'b1;
    end else begin
        lineBuf_val_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            lineBuf_val_1_address0 = tmp_9_fu_723_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lineBuf_val_1_address0 = lineBuf_val_1_addr_reg_1415;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuf_val_1_address0 = tmp_7_fu_569_p1;
        end else begin
            lineBuf_val_1_address0 = 'bx;
        end
    end else begin
        lineBuf_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            lineBuf_val_1_address1 = tmp_40_0_2_fu_780_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            lineBuf_val_1_address1 = tmp_40_0_1_fu_736_p1;
        end else begin
            lineBuf_val_1_address1 = 'bx;
        end
    end else begin
        lineBuf_val_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuf_val_1_ce0 = 1'b1;
    end else begin
        lineBuf_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuf_val_1_ce1 = 1'b1;
    end else begin
        lineBuf_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lineBuf_val_1_we0 = 1'b1;
    end else begin
        lineBuf_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            lineBuf_val_2_address0 = tmp_9_fu_723_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lineBuf_val_2_address0 = lineBuf_val_2_addr_reg_1420;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuf_val_2_address0 = tmp_7_fu_569_p1;
        end else begin
            lineBuf_val_2_address0 = 'bx;
        end
    end else begin
        lineBuf_val_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            lineBuf_val_2_address1 = tmp_40_0_2_fu_780_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            lineBuf_val_2_address1 = tmp_40_0_1_fu_736_p1;
        end else begin
            lineBuf_val_2_address1 = 'bx;
        end
    end else begin
        lineBuf_val_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lineBuf_val_2_ce0 = 1'b1;
    end else begin
        lineBuf_val_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuf_val_2_ce1 = 1'b1;
    end else begin
        lineBuf_val_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_1386 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lineBuf_val_2_we0 = 1'b1;
    end else begin
        lineBuf_val_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (or_cond_reg_1425 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4) & (or_cond_reg_1425 == 1'd0) & (exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (or_cond_reg_1425 == 1'd0) & (exitcond_flatten_reg_1386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (or_cond_reg_1425_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        outStream_TDATA_blk_n = outStream_V_data_V_1_state[1'd1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_cond_reg_1425 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        outStream_V_data_V_1_data_in = dataOutChannel_data_s_fu_1291_p2;
    end else if (((ap_predicate_op158_write_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_01001))) begin
        outStream_V_data_V_1_data_in = 24'd0;
    end else begin
        outStream_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_data_V_1_sel == 1'b1)) begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B;
    end else begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((or_cond_reg_1425 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op158_write_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        outStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((or_cond_reg_1425 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op158_write_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((or_cond_reg_1425 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op158_write_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((or_cond_reg_1425 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op158_write_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((or_cond_reg_1425 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op158_write_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((or_cond_reg_1425 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op158_write_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((or_cond_reg_1425 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op158_write_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_flatten_fu_489_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_flatten_fu_489_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_state13 : begin
            if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (outStream_V_dest_V_1_state[1'd0] == 1'b0) & (outStream_V_id_V_1_state[1'd0] == 1'b0) & (outStream_V_last_V_1_state[1'd0] == 1'b0) & (outStream_V_user_V_1_state[1'd0] == 1'b0) & (outStream_V_strb_V_1_state[1'd0] == 1'b0) & (outStream_V_keep_V_1_state[1'd0] == 1'b0) & (outStream_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign G_fu_629_p4 = {{inStream_V_data_V_0_data_out[15:8]}};

assign R_fu_625_p1 = inStream_V_data_V_0_data_out[7:0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_flatten_reg_1386 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_flatten_reg_1386 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((or_cond_reg_1425 == 1'd1) & (outStream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((or_cond_reg_1425_pp0_iter1_reg == 1'd1) & (outStream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13 = ((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((exitcond_flatten_reg_1386 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((outStream_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op158_write_state5 == 1'b1));
end

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((outStream_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op171_write_state6 == 1'b1));
end

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op158_write_state5 = ((or_cond_reg_1425 == 1'd0) & (exitcond_flatten_reg_1386 == 1'd0));
end

always @ (*) begin
    ap_predicate_op171_write_state6 = ((or_cond_reg_1425 == 1'd0) & (exitcond_flatten_reg_1386 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_assign_1_0_2_fu_775_p2 = (32'd2 + pixConvolved_1_mid2_reg_1459);

assign col_assign_mid2_fu_507_p3 = ((exitcond_fu_501_p2[0:0] === 1'b1) ? 11'd0 : ap_phi_mux_col_assign_phi_fu_450_p4);

assign dataOutChannel_data_s_fu_1291_p2 = (tmp_16_fu_1265_p3 | tmp20_fu_1285_p2);

assign exitcond_flatten_fu_489_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_428_p4 == 20'd786432) ? 1'b1 : 1'b0);

assign exitcond_fu_501_p2 = ((ap_phi_mux_col_assign_phi_fu_450_p4 == 11'd1024) ? 1'b1 : 1'b0);

assign grp_fu_1303_p0 = 16'd150;

assign grp_fu_1303_p1 = grp_fu_1303_p10;

assign grp_fu_1303_p10 = G_fu_629_p4;

assign grp_fu_1303_p2 = (16'd76 * tmp_4_fu_643_p1);

assign i_mid2_fu_561_p3 = ((exitcond_fu_501_p2[0:0] === 1'b1) ? i_s_fu_515_p2 : ap_phi_mux_i_phi_fu_439_p4);

assign i_s_fu_515_p2 = (10'd1 + ap_phi_mux_i_phi_fu_439_p4);

assign icmp1_fu_547_p2 = ((tmp_5_fu_537_p4 != 9'd0) ? 1'b1 : 1'b0);

assign icmp2_fu_585_p2 = ((tmp_11_fu_575_p4 != 10'd0) ? 1'b1 : 1'b0);

assign icmp_fu_531_p2 = ((tmp_fu_521_p4 != 9'd0) ? 1'b1 : 1'b0);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state[1'd1];

assign inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full & ~inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_load_B = (inStream_V_data_V_0_state_cmp_full & inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd;

assign inStream_V_data_V_0_state_cmp_full = ((inStream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_V_0_vld_in = inStream_TVALID;

assign inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_last_V_0_ack_in = inStream_V_last_V_0_state[1'd1];

assign inStream_V_last_V_0_load_A = (inStream_V_last_V_0_state_cmp_full & ~inStream_V_last_V_0_sel_wr);

assign inStream_V_last_V_0_load_B = (inStream_V_last_V_0_state_cmp_full & inStream_V_last_V_0_sel_wr);

assign inStream_V_last_V_0_sel = inStream_V_last_V_0_sel_rd;

assign inStream_V_last_V_0_state_cmp_full = ((inStream_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_last_V_0_vld_in = inStream_TVALID;

assign inStream_V_last_V_0_vld_out = inStream_V_last_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign indvar_flatten_next_fu_495_p2 = (ap_phi_mux_indvar_flatten_phi_fu_428_p4 + 20'd1);

assign j_fu_1124_p2 = (col_assign_mid2_reg_1400 + 11'd1);

assign lineBuf_val_2_d0 = {{tmp_3_fu_697_p2[15:8]}};

assign or_cond_fu_591_p2 = (tmp_mid2_fu_553_p3 & icmp2_fu_585_p2);

assign outStream_TDATA = outStream_V_data_V_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state[1'd1];

assign outStream_V_data_V_1_ack_out = outStream_TREADY;

assign outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full & ~outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_load_B = (outStream_V_data_V_1_state_cmp_full & outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd;

assign outStream_V_data_V_1_state_cmp_full = ((outStream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign p_cast_fu_1200_p1 = p_s_fu_1192_p3;

assign p_s_fu_1192_p3 = ((tmp_20_fu_1184_p3[0:0] === 1'b1) ? 15'd0 : valOut_2_cast_fu_1179_p2);

assign p_shl5_cast_fu_683_p1 = p_shl5_fu_675_p3;

assign p_shl5_fu_675_p3 = {{tmp_2_fu_653_p4}, {1'd0}};

assign p_shl_cast_fu_671_p1 = p_shl_fu_663_p3;

assign p_shl_fu_663_p3 = {{tmp_2_fu_653_p4}, {5'd0}};

assign pixConvolved_1_mid2_fu_716_p3 = ((exitcond_reg_1395[0:0] === 1'b1) ? 32'd0 : pixConvolved_1_fu_164);

assign pixConvolved_fu_730_p2 = (32'd1 + pixConvolved_1_mid2_fu_716_p3);

assign sel_tmp2_fu_472_p2 = ((operation == 32'd1) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_478_p2 = ((operation == 32'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_466_p2 = ((operation == 32'd2) ? 1'b1 : 1'b0);

assign tmp10_fu_1154_p2 = (tmp9_fu_1149_p2 + window_val_1_0_reg_1548);

assign tmp11_fu_1163_p2 = (tmp10_fu_1154_p2 + tmp8_reg_1587);

assign tmp1_fu_872_p2 = (window_val_2_0_reg_1571 + window_val_2_1_fu_866_p2);

assign tmp20_fu_1285_p2 = (tmp_18_fu_1281_p1 | tmp_17_fu_1273_p3);

assign tmp2_fu_877_p2 = (window_val_1_2_reg_1565 + window_val_1_1_reg_1559);

assign tmp7_fu_1145_p2 = (tmp2_reg_1582 + tmp1_reg_1577);

assign tmp8_fu_889_p2 = (window_val_0_1_reg_1506 + window_val_0_0_reg_1500);

assign tmp9_fu_1149_p2 = (window_val_0_2_reg_1542 + window_val_2_2_fu_1136_p2);

assign tmp_10_fu_897_p2 = (tmp_13_fu_885_p1 + tmp_12_fu_881_p1);

assign tmp_11_0_1_i_fu_1026_p2 = ((tmp_22_fu_906_p1 > tmp_21_fu_903_p1) ? 1'b1 : 1'b0);

assign tmp_11_0_2_i_fu_1040_p2 = ((tmp_23_fu_923_p1 > valInWindow_0_maxVal_fu_1032_p3) ? 1'b1 : 1'b0);

assign tmp_11_1_1_i_fu_1068_p2 = ((tmp_25_fu_957_p1 > valInWindow_0_maxVal_2_fu_1060_p3) ? 1'b1 : 1'b0);

assign tmp_11_1_2_i_fu_1082_p2 = ((tmp_26_fu_974_p1 > valInWindow_0_maxVal_3_fu_1074_p3) ? 1'b1 : 1'b0);

assign tmp_11_1_i_fu_1054_p2 = ((tmp_24_fu_940_p1 > valInWindow_0_maxVal_1_fu_1046_p3) ? 1'b1 : 1'b0);

assign tmp_11_2_1_i_fu_1110_p2 = ((tmp_28_fu_1008_p1 > valInWindow_0_maxVal_5_fu_1102_p3) ? 1'b1 : 1'b0);

assign tmp_11_2_2_i_fu_1224_p2 = ((tmp_29_fu_1204_p1 > valInWindow_0_maxVal_6_reg_1608) ? 1'b1 : 1'b0);

assign tmp_11_2_i_fu_1096_p2 = ((tmp_27_fu_991_p1 > valInWindow_0_maxVal_4_fu_1088_p3) ? 1'b1 : 1'b0);

assign tmp_11_fu_575_p4 = {{col_assign_mid2_fu_507_p3[10:1]}};

assign tmp_12_fu_881_p1 = tmp2_fu_877_p2[14:0];

assign tmp_13_fu_885_p1 = tmp1_fu_872_p2[14:0];

assign tmp_14_fu_1159_p1 = tmp10_fu_1154_p2[14:0];

assign tmp_15_fu_893_p1 = tmp8_fu_889_p2[14:0];

assign tmp_16_fu_1265_p3 = {{tmp_30_fu_1261_p1}, {16'd0}};

assign tmp_17_fu_1273_p3 = {{valOut_3_fu_1254_p3}, {8'd0}};

assign tmp_18_fu_1281_p1 = valOut_3_fu_1254_p3;

assign tmp_19_fu_1168_p2 = (tmp_15_reg_1592 + tmp_14_fu_1159_p1);

assign tmp_20_fu_1184_p3 = valOut_fu_1173_p2[32'd15];

assign tmp_21_fu_903_p1 = window_val_0_0_reg_1500[7:0];

assign tmp_22_fu_906_p1 = window_val_0_1_reg_1506[7:0];

assign tmp_23_fu_923_p1 = window_val_0_2_reg_1542[7:0];

assign tmp_24_fu_940_p1 = window_val_1_0_reg_1548[7:0];

assign tmp_25_fu_957_p1 = window_val_1_1_reg_1559[7:0];

assign tmp_26_fu_974_p1 = window_val_1_2_reg_1565[7:0];

assign tmp_27_fu_991_p1 = window_val_2_0_reg_1571[7:0];

assign tmp_28_fu_1008_p1 = window_val_2_1_fu_866_p2[7:0];

assign tmp_29_fu_1204_p1 = window_val_2_2_fu_1136_p2[7:0];

assign tmp_2_fu_653_p4 = {{inStream_V_data_V_0_data_out[23:16]}};

assign tmp_30_fu_1261_p1 = valOut_3_fu_1254_p3[7:0];

assign tmp_3_fu_697_p2 = ($signed(grp_fu_1303_p3) + $signed(tmp_8_cast_fu_693_p1));

assign tmp_40_0_1_fu_736_p1 = pixConvolved_fu_730_p2;

assign tmp_40_0_2_fu_780_p1 = col_assign_1_0_2_fu_775_p2;

assign tmp_4_fu_643_p1 = tmp_4_fu_643_p10;

assign tmp_4_fu_643_p10 = R_fu_625_p1;

assign tmp_5_0_1_i_fu_909_p2 = ((tmp_22_fu_906_p1 < tmp_21_fu_903_p1) ? 1'b1 : 1'b0);

assign tmp_5_0_2_i_fu_926_p2 = ((tmp_23_fu_923_p1 < valInWindow_0_minVal_fu_915_p3) ? 1'b1 : 1'b0);

assign tmp_5_1_1_i_fu_960_p2 = ((tmp_25_fu_957_p1 < valInWindow_0_minVal_2_fu_949_p3) ? 1'b1 : 1'b0);

assign tmp_5_1_2_i_fu_977_p2 = ((tmp_26_fu_974_p1 < valInWindow_0_minVal_3_fu_966_p3) ? 1'b1 : 1'b0);

assign tmp_5_1_i_fu_943_p2 = ((tmp_24_fu_940_p1 < valInWindow_0_minVal_1_fu_932_p3) ? 1'b1 : 1'b0);

assign tmp_5_2_1_i_fu_1012_p2 = ((tmp_28_fu_1008_p1 < valInWindow_0_minVal_5_fu_1000_p3) ? 1'b1 : 1'b0);

assign tmp_5_2_2_i_fu_1208_p2 = ((tmp_29_fu_1204_p1 < valInWindow_0_minVal_6_reg_1602) ? 1'b1 : 1'b0);

assign tmp_5_2_i_fu_994_p2 = ((tmp_27_fu_991_p1 < valInWindow_0_minVal_4_fu_983_p3) ? 1'b1 : 1'b0);

assign tmp_5_fu_537_p4 = {{ap_phi_mux_i_phi_fu_439_p4[9:1]}};

assign tmp_7_fu_569_p1 = col_assign_mid2_fu_507_p3;

assign tmp_8_cast_fu_693_p1 = $signed(tmp_8_fu_687_p2);

assign tmp_8_fu_687_p2 = (p_shl_cast_fu_671_p1 - p_shl5_cast_fu_683_p1);

assign tmp_9_fu_723_p1 = pixConvolved_1_mid2_fu_716_p3;

assign tmp_fu_521_p4 = {{i_s_fu_515_p2[9:1]}};

assign tmp_mid2_fu_553_p3 = ((exitcond_fu_501_p2[0:0] === 1'b1) ? icmp_fu_531_p2 : icmp1_fu_547_p2);

assign valInWindow_0_maxVal_1_fu_1046_p3 = ((tmp_11_0_2_i_fu_1040_p2[0:0] === 1'b1) ? tmp_23_fu_923_p1 : valInWindow_0_maxVal_fu_1032_p3);

assign valInWindow_0_maxVal_2_fu_1060_p3 = ((tmp_11_1_i_fu_1054_p2[0:0] === 1'b1) ? tmp_24_fu_940_p1 : valInWindow_0_maxVal_1_fu_1046_p3);

assign valInWindow_0_maxVal_3_fu_1074_p3 = ((tmp_11_1_1_i_fu_1068_p2[0:0] === 1'b1) ? tmp_25_fu_957_p1 : valInWindow_0_maxVal_2_fu_1060_p3);

assign valInWindow_0_maxVal_4_fu_1088_p3 = ((tmp_11_1_2_i_fu_1082_p2[0:0] === 1'b1) ? tmp_26_fu_974_p1 : valInWindow_0_maxVal_3_fu_1074_p3);

assign valInWindow_0_maxVal_5_fu_1102_p3 = ((tmp_11_2_i_fu_1096_p2[0:0] === 1'b1) ? tmp_27_fu_991_p1 : valInWindow_0_maxVal_4_fu_1088_p3);

assign valInWindow_0_maxVal_6_fu_1116_p3 = ((tmp_11_2_1_i_fu_1110_p2[0:0] === 1'b1) ? tmp_28_fu_1008_p1 : valInWindow_0_maxVal_5_fu_1102_p3);

assign valInWindow_0_maxVal_7_fu_1229_p3 = ((tmp_11_2_2_i_fu_1224_p2[0:0] === 1'b1) ? tmp_29_fu_1204_p1 : valInWindow_0_maxVal_6_reg_1608);

assign valInWindow_0_maxVal_fu_1032_p3 = ((tmp_11_0_1_i_fu_1026_p2[0:0] === 1'b1) ? tmp_22_fu_906_p1 : tmp_21_fu_903_p1);

assign valInWindow_0_minVal_1_fu_932_p3 = ((tmp_5_0_2_i_fu_926_p2[0:0] === 1'b1) ? tmp_23_fu_923_p1 : valInWindow_0_minVal_fu_915_p3);

assign valInWindow_0_minVal_2_fu_949_p3 = ((tmp_5_1_i_fu_943_p2[0:0] === 1'b1) ? tmp_24_fu_940_p1 : valInWindow_0_minVal_1_fu_932_p3);

assign valInWindow_0_minVal_3_fu_966_p3 = ((tmp_5_1_1_i_fu_960_p2[0:0] === 1'b1) ? tmp_25_fu_957_p1 : valInWindow_0_minVal_2_fu_949_p3);

assign valInWindow_0_minVal_4_fu_983_p3 = ((tmp_5_1_2_i_fu_977_p2[0:0] === 1'b1) ? tmp_26_fu_974_p1 : valInWindow_0_minVal_3_fu_966_p3);

assign valInWindow_0_minVal_5_fu_1000_p3 = ((tmp_5_2_i_fu_994_p2[0:0] === 1'b1) ? tmp_27_fu_991_p1 : valInWindow_0_minVal_4_fu_983_p3);

assign valInWindow_0_minVal_6_fu_1018_p3 = ((tmp_5_2_1_i_fu_1012_p2[0:0] === 1'b1) ? tmp_28_fu_1008_p1 : valInWindow_0_minVal_5_fu_1000_p3);

assign valInWindow_0_minVal_7_fu_1213_p3 = ((tmp_5_2_2_i_fu_1208_p2[0:0] === 1'b1) ? tmp_29_fu_1204_p1 : valInWindow_0_minVal_6_reg_1602);

assign valInWindow_0_minVal_fu_915_p3 = ((tmp_5_0_1_i_fu_909_p2[0:0] === 1'b1) ? tmp_22_fu_906_p1 : tmp_21_fu_903_p1);

assign valOut_2_cast_fu_1179_p2 = (tmp_10_reg_1597 + tmp_19_fu_1168_p2);

assign valOut_2_fu_1220_p1 = valInWindow_0_minVal_7_fu_1213_p3;

assign valOut_3_fu_1254_p3 = ((sel_tmp4_reg_1381[0:0] === 1'b1) ? p_cast_fu_1200_p1 : valOut_6_fu_1247_p3);

assign valOut_4_fu_1236_p1 = valInWindow_0_maxVal_7_fu_1229_p3;

assign valOut_5_fu_1240_p3 = ((sel_tmp_reg_1371[0:0] === 1'b1) ? valOut_4_fu_1236_p1 : valOut_1_fu_168);

assign valOut_6_fu_1247_p3 = ((sel_tmp2_reg_1376[0:0] === 1'b1) ? valOut_2_fu_1220_p1 : valOut_5_fu_1240_p3);

assign valOut_fu_1173_p2 = (tmp11_fu_1163_p2 + tmp7_fu_1145_p2);

assign window_val_0_0_fu_756_p0 = window_val_0_0_fu_756_p00;

assign window_val_0_0_fu_756_p00 = lineBuf_val_0_q0;

assign window_val_0_0_fu_756_p1 = reg_457;

assign window_val_0_0_fu_756_p2 = ($signed({{1'b0}, {window_val_0_0_fu_756_p0}}) * $signed(window_val_0_0_fu_756_p1));

assign window_val_0_1_fu_769_p0 = window_val_0_1_fu_769_p00;

assign window_val_0_1_fu_769_p00 = lineBuf_val_0_q1;

assign window_val_0_1_fu_769_p1 = kernel_load_1_reg_1475;

assign window_val_0_1_fu_769_p2 = ($signed({{1'b0}, {window_val_0_1_fu_769_p0}}) * $signed(window_val_0_1_fu_769_p1));

assign window_val_0_2_fu_799_p0 = window_val_0_2_fu_799_p00;

assign window_val_0_2_fu_799_p00 = lineBuf_val_0_q1;

assign window_val_0_2_fu_799_p1 = reg_457;

assign window_val_0_2_fu_799_p2 = ($signed({{1'b0}, {window_val_0_2_fu_799_p0}}) * $signed(window_val_0_2_fu_799_p1));

assign window_val_1_0_fu_813_p0 = window_val_1_0_fu_813_p00;

assign window_val_1_0_fu_813_p00 = reg_461;

assign window_val_1_0_fu_813_p1 = kernel_q0;

assign window_val_1_0_fu_813_p2 = ($signed({{1'b0}, {window_val_1_0_fu_813_p0}}) * $signed(window_val_1_0_fu_813_p1));

assign window_val_1_1_fu_826_p0 = window_val_1_1_fu_826_p00;

assign window_val_1_1_fu_826_p00 = lineBuf_val_1_load_2_reg_1517;

assign window_val_1_1_fu_826_p1 = kernel_q0;

assign window_val_1_1_fu_826_p2 = ($signed({{1'b0}, {window_val_1_1_fu_826_p0}}) * $signed(window_val_1_1_fu_826_p1));

assign window_val_1_2_fu_840_p0 = window_val_1_2_fu_840_p00;

assign window_val_1_2_fu_840_p00 = reg_461;

assign window_val_1_2_fu_840_p1 = kernel_q0;

assign window_val_1_2_fu_840_p2 = ($signed({{1'b0}, {window_val_1_2_fu_840_p0}}) * $signed(window_val_1_2_fu_840_p1));

assign window_val_2_0_fu_853_p0 = window_val_2_0_fu_853_p00;

assign window_val_2_0_fu_853_p00 = lineBuf_val_2_load_1_reg_1527;

assign window_val_2_0_fu_853_p1 = kernel_q0;

assign window_val_2_0_fu_853_p2 = ($signed({{1'b0}, {window_val_2_0_fu_853_p0}}) * $signed(window_val_2_0_fu_853_p1));

assign window_val_2_1_fu_866_p0 = window_val_2_1_fu_866_p00;

assign window_val_2_1_fu_866_p00 = lineBuf_val_2_load_2_reg_1532;

assign window_val_2_1_fu_866_p1 = kernel_q0;

assign window_val_2_1_fu_866_p2 = ($signed({{1'b0}, {window_val_2_1_fu_866_p0}}) * $signed(window_val_2_1_fu_866_p1));

assign window_val_2_2_fu_1136_p0 = window_val_2_2_fu_1136_p00;

assign window_val_2_2_fu_1136_p00 = lineBuf_val_2_load_3_reg_1554;

assign window_val_2_2_fu_1136_p1 = kernel_q0;

assign window_val_2_2_fu_1136_p2 = ($signed({{1'b0}, {window_val_2_2_fu_1136_p0}}) * $signed(window_val_2_2_fu_1136_p1));

always @ (posedge ap_clk) begin
    tmp_7_reg_1410[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //doKernel
