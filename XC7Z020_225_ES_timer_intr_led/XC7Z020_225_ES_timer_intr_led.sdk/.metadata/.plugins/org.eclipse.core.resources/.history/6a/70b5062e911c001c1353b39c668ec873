/*
 * main.c
 *
 *  Created on: 2021年9月14日
 *      Author: NekoSilverfox
 */


#include <stdio.h>
#include "xparameters.h"			//器件参数信息
#include "xgpiops.h"				//包含PS GPIO的函数
#include "sleep.h"					//包含sleep()函数
#include "xscutimer.h"				// 定时器
#include "xscugic.h"

#define GPIO_DEVICE_ID  	XPAR_XGPIOPS_0_DEVICE_ID
#define TIMER_DEVICE_ID		XPAR_XSCUTIMER_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID
//连接到MIO的LED
#define MIO50_LED1 			50							/* 核心板PS端LED */
#define MIO51_LED2 			51
#define TIMER_LOAD_VALUE	0x3F940A9					/* 定时时间需要200ms 时钟频率：333.333Mhz
													计算：(1s = 1000ms = 100 0000ns)
														1. 周期： 1000ms 除 333.333 ≈ 3ns
														2. 所需时间：200 000000 / 3ns =  66,666,666.66666
														3. 转16进制： */

XGpioPs_Config* ConfigPtr = NULL;
XGpioPs Gpio;											/* The driver instance for GPIO Device. */
XScuTimer TimerInstance;								/* Cortex A9 Scu Private Timer Instance */
XScuGic IntcInstance;		/* Interrupt Controller Instance */


long init_mio_gpio() {
	// 0. 初始化GPIO驱动
	// 查找器件的ID，查找器件的配置信息
	ConfigPtr = XGpioPs_LookupConfig(GPIO_DEVICE_ID);

	// 初始化GPIO驱动
	int Status = XGpioPs_CfgInitialize(&Gpio, ConfigPtr, ConfigPtr->BaseAddr);
    if (Status != XST_SUCCESS){
        return XST_FAILURE;
    }
}


// 定时器初始化
void init_timer(XScuTimer* TimerInstancePtr, u16 TimerDeviceId) {
	// 初始化私有定时器 Initialize the Scu Private Timer driver.
	XScuTimer_Config* ConfigPtr = XScuTimer_LookupConfig(TimerDeviceId);
	int Status = XScuTimer_CfgInitialize(TimerInstancePtr, ConfigPtr,
					ConfigPtr->BaseAddr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// 使能自动装载模式
	XScuTimer_EnableAutoReload(TimerInstancePtr);

	// 配置计数器初始值
	XScuTimer_LoadTimer(TimerInstancePtr, TIMER_LOAD_VALUE);

}


// 定时器中断初始化
void init_intr_timer(XScuGic* IntcInstancePtr) {
	XScuGic_Config *IntcConfig;
	// 初始化中断控制器
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	int Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
					IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// 中断异常处理
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT,
				(Xil_ExceptionHandler)XScuGic_InterruptHandler,
				IntcInstancePtr);

	// 设置定时器的处理函数
	Status = XScuGic_Connect(IntcInstancePtr, TimerIntrId,
				(Xil_ExceptionHandler)timer_intr_hander,
				(void *)TimerInstancePtr);
	if (Status != XST_SUCCESS) {
		return Status;
	}

	// 使能中断控制器
	XScuGic_Enable(IntcInstancePtr, TimerIntrId);

	// 使能中断控制器

}



// 闪烁一个LED
void shift_one_led() {
	// 1. GPIO方向设置为输出（0 - 输入；1 - 输出）
	XGpioPs_SetDirectionPin(&Gpio, MIO50_LED1, 1);

	// 2. 设置输出使能（0 - 关闭输出使能；1 - 打开输出使能）
	XGpioPs_SetOutputEnablePin(&Gpio, MIO50_LED1, 1);

	// 实现LED闪烁（点亮、延时、熄灭，以此重复）
	while(1) {
		// 3. 写数据到GPIO的输出引脚（点亮）
		XGpioPs_WritePin(&Gpio, MIO50_LED1, 0x0);

		// 延时
		//sleep(1);  秒为单位
		usleep(500000);  /* 微秒为单位  0.5sec */


		// 3. 写数据到GPIO的输出引脚（熄灭）
		XGpioPs_WritePin(&Gpio, MIO50_LED1, 0x1);

		// 延时
		usleep(500000);  /* 微秒为单位  0.5sec */
	}
}


// 闪烁两个LED
void shift_two_led() {
	// 1. GPIO 引脚方向设置为输出（0 - 输入；1 - 输出）
	XGpioPs_SetDirectionPin(&Gpio, MIO50_LED1, 1);
	XGpioPs_SetDirectionPin(&Gpio, MIO51_LED2, 1);

	// 2. 设置引脚输出使能（0 - 关闭输出使能；1 - 打开输出使能）
	XGpioPs_SetOutputEnablePin(&Gpio, MIO50_LED1, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, MIO51_LED2, 1);


	int shift_time = 250000;

	// 实现LED闪烁（点亮、延时、熄灭，以此重复）
	while(1) {
		// 3. 写数据到GPIO的输出引脚（点亮）
		XGpioPs_WritePin(&Gpio, MIO50_LED1, 0x0);
		XGpioPs_WritePin(&Gpio, MIO51_LED2, 0x0);
		// 延时
		//sleep(1);  秒为单位
		usleep(shift_time);  /* 微秒为单位  0.25sec */


		// 3. 写数据到GPIO的输出引脚（熄灭）
		XGpioPs_WritePin(&Gpio, MIO50_LED1, 0x1);
		XGpioPs_WritePin(&Gpio, MIO51_LED2, 0x1);
		// 延时
		usleep(shift_time);  /* 微秒为单位  0.5sec */
	}
}


int main() {
	printf("GPIO MIO TEST!\n\r");

	init_mio_gpio();
	init_timer(&TimerInstance, TIMER_DEVICE_ID);
	init_intr_timer(&IntcInstance);

	XGpioPs_SetDirectionPin(&Gpio, MIO50_LED1, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, MIO50_LED1, 1);
	// XGpioPs_WritePin(&Gpio, MIO50_LED1, 0x1);


	// shift_two_led();

	return 0;
}
