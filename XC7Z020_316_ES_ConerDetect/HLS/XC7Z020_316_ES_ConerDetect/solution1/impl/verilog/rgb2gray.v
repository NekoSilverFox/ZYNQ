// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rgb2gray (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        imgIn_data_stream_0_V_dout,
        imgIn_data_stream_0_V_empty_n,
        imgIn_data_stream_0_V_read,
        imgIn_data_stream_1_V_dout,
        imgIn_data_stream_1_V_empty_n,
        imgIn_data_stream_1_V_read,
        imgIn_data_stream_2_V_dout,
        imgIn_data_stream_2_V_empty_n,
        imgIn_data_stream_2_V_read,
        imgOut_3C_data_stream_0_V_din,
        imgOut_3C_data_stream_0_V_full_n,
        imgOut_3C_data_stream_0_V_write,
        imgOut_3C_data_stream_1_V_din,
        imgOut_3C_data_stream_1_V_full_n,
        imgOut_3C_data_stream_1_V_write,
        imgOut_3C_data_stream_2_V_din,
        imgOut_3C_data_stream_2_V_full_n,
        imgOut_3C_data_stream_2_V_write,
        imgOut_1C_data_stream_V_din,
        imgOut_1C_data_stream_V_full_n,
        imgOut_1C_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] imgIn_data_stream_0_V_dout;
input   imgIn_data_stream_0_V_empty_n;
output   imgIn_data_stream_0_V_read;
input  [7:0] imgIn_data_stream_1_V_dout;
input   imgIn_data_stream_1_V_empty_n;
output   imgIn_data_stream_1_V_read;
input  [7:0] imgIn_data_stream_2_V_dout;
input   imgIn_data_stream_2_V_empty_n;
output   imgIn_data_stream_2_V_read;
output  [7:0] imgOut_3C_data_stream_0_V_din;
input   imgOut_3C_data_stream_0_V_full_n;
output   imgOut_3C_data_stream_0_V_write;
output  [7:0] imgOut_3C_data_stream_1_V_din;
input   imgOut_3C_data_stream_1_V_full_n;
output   imgOut_3C_data_stream_1_V_write;
output  [7:0] imgOut_3C_data_stream_2_V_din;
input   imgOut_3C_data_stream_2_V_full_n;
output   imgOut_3C_data_stream_2_V_write;
output  [7:0] imgOut_1C_data_stream_V_din;
input   imgOut_1C_data_stream_V_full_n;
output   imgOut_1C_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg imgIn_data_stream_0_V_read;
reg imgIn_data_stream_1_V_read;
reg imgIn_data_stream_2_V_read;
reg imgOut_3C_data_stream_0_V_write;
reg imgOut_3C_data_stream_1_V_write;
reg imgOut_3C_data_stream_2_V_write;
reg imgOut_1C_data_stream_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    imgIn_data_stream_0_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_242_p2;
reg    imgIn_data_stream_1_V_blk_n;
reg    imgIn_data_stream_2_V_blk_n;
reg    imgOut_3C_data_stream_0_V_blk_n;
wire    ap_CS_fsm_state5;
reg    imgOut_3C_data_stream_1_V_blk_n;
reg    imgOut_3C_data_stream_2_V_blk_n;
reg    imgOut_1C_data_stream_V_blk_n;
wire   [9:0] idxRow_1_fu_236_p2;
reg   [9:0] idxRow_1_reg_321;
wire    ap_CS_fsm_state2;
wire   [10:0] idxCol_1_fu_248_p2;
reg   [10:0] idxCol_1_reg_329;
reg    ap_block_state3;
reg   [7:0] tmp_10_reg_334;
reg   [7:0] tmp_11_reg_339;
reg   [7:0] tmp_7_reg_344;
reg   [7:0] tmp_9_reg_350;
wire    ap_CS_fsm_state4;
reg   [9:0] idxRow_reg_208;
reg    ap_block_state1;
reg   [10:0] idxCol_reg_219;
reg    ap_block_state5;
wire   [0:0] exitcond1_fu_230_p2;
wire   [12:0] p_shl_fu_260_p3;
wire   [8:0] p_shl1_fu_271_p3;
wire   [13:0] p_shl_cast_fu_267_p1;
wire   [13:0] p_shl1_cast_fu_278_p1;
wire  signed [13:0] tmp_6_fu_282_p2;
wire  signed [15:0] grp_fu_301_p3;
wire   [7:0] grp_fu_301_p0;
wire   [7:0] grp_fu_301_p1;
wire  signed [15:0] grp_fu_309_p3;
wire   [7:0] grp_fu_309_p0;
wire   [8:0] grp_fu_309_p1;
reg   [4:0] ap_NS_fsm;
wire   [15:0] grp_fu_301_p00;
wire   [15:0] grp_fu_309_p00;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

doCorner_mac_mulabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
doCorner_mac_mulabkb_U11(
    .din0(grp_fu_301_p0),
    .din1(grp_fu_301_p1),
    .din2(grp_fu_309_p3),
    .dout(grp_fu_301_p3)
);

doCorner_mac_mulacud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
doCorner_mac_mulacud_U12(
    .din0(grp_fu_309_p0),
    .din1(grp_fu_309_p1),
    .din2(tmp_6_fu_282_p2),
    .dout(grp_fu_309_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_230_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        idxCol_reg_219 <= 11'd0;
    end else if ((~((imgOut_1C_data_stream_V_full_n == 1'b0) | (imgOut_3C_data_stream_2_V_full_n == 1'b0) | (imgOut_3C_data_stream_1_V_full_n == 1'b0) | (imgOut_3C_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        idxCol_reg_219 <= idxCol_1_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_1_V_empty_n == 1'b0))) & (exitcond_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        idxRow_reg_208 <= idxRow_1_reg_321;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        idxRow_reg_208 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_1_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        idxCol_1_reg_329 <= idxCol_1_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        idxRow_1_reg_321 <= idxRow_1_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_1_V_empty_n == 1'b0))) & (exitcond_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_10_reg_334 <= imgIn_data_stream_0_V_dout;
        tmp_11_reg_339 <= imgIn_data_stream_1_V_dout;
        tmp_7_reg_344 <= imgIn_data_stream_2_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_9_reg_350 <= {{grp_fu_301_p3[15:8]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_230_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        imgIn_data_stream_0_V_blk_n = imgIn_data_stream_0_V_empty_n;
    end else begin
        imgIn_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_1_V_empty_n == 1'b0))) & (exitcond_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        imgIn_data_stream_0_V_read = 1'b1;
    end else begin
        imgIn_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        imgIn_data_stream_1_V_blk_n = imgIn_data_stream_1_V_empty_n;
    end else begin
        imgIn_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_1_V_empty_n == 1'b0))) & (exitcond_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        imgIn_data_stream_1_V_read = 1'b1;
    end else begin
        imgIn_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        imgIn_data_stream_2_V_blk_n = imgIn_data_stream_2_V_empty_n;
    end else begin
        imgIn_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_1_V_empty_n == 1'b0))) & (exitcond_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        imgIn_data_stream_2_V_read = 1'b1;
    end else begin
        imgIn_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        imgOut_1C_data_stream_V_blk_n = imgOut_1C_data_stream_V_full_n;
    end else begin
        imgOut_1C_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((imgOut_1C_data_stream_V_full_n == 1'b0) | (imgOut_3C_data_stream_2_V_full_n == 1'b0) | (imgOut_3C_data_stream_1_V_full_n == 1'b0) | (imgOut_3C_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        imgOut_1C_data_stream_V_write = 1'b1;
    end else begin
        imgOut_1C_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        imgOut_3C_data_stream_0_V_blk_n = imgOut_3C_data_stream_0_V_full_n;
    end else begin
        imgOut_3C_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((imgOut_1C_data_stream_V_full_n == 1'b0) | (imgOut_3C_data_stream_2_V_full_n == 1'b0) | (imgOut_3C_data_stream_1_V_full_n == 1'b0) | (imgOut_3C_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        imgOut_3C_data_stream_0_V_write = 1'b1;
    end else begin
        imgOut_3C_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        imgOut_3C_data_stream_1_V_blk_n = imgOut_3C_data_stream_1_V_full_n;
    end else begin
        imgOut_3C_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((imgOut_1C_data_stream_V_full_n == 1'b0) | (imgOut_3C_data_stream_2_V_full_n == 1'b0) | (imgOut_3C_data_stream_1_V_full_n == 1'b0) | (imgOut_3C_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        imgOut_3C_data_stream_1_V_write = 1'b1;
    end else begin
        imgOut_3C_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        imgOut_3C_data_stream_2_V_blk_n = imgOut_3C_data_stream_2_V_full_n;
    end else begin
        imgOut_3C_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((imgOut_1C_data_stream_V_full_n == 1'b0) | (imgOut_3C_data_stream_2_V_full_n == 1'b0) | (imgOut_3C_data_stream_1_V_full_n == 1'b0) | (imgOut_3C_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        imgOut_3C_data_stream_2_V_write = 1'b1;
    end else begin
        imgOut_3C_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_230_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_230_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_1_V_empty_n == 1'b0))) & (exitcond_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_1_V_empty_n == 1'b0))) & (exitcond_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if ((~((imgOut_1C_data_stream_V_full_n == 1'b0) | (imgOut_3C_data_stream_2_V_full_n == 1'b0) | (imgOut_3C_data_stream_1_V_full_n == 1'b0) | (imgOut_3C_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = (((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_fu_242_p2 == 1'd0) & (imgIn_data_stream_1_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5 = ((imgOut_1C_data_stream_V_full_n == 1'b0) | (imgOut_3C_data_stream_2_V_full_n == 1'b0) | (imgOut_3C_data_stream_1_V_full_n == 1'b0) | (imgOut_3C_data_stream_0_V_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign exitcond1_fu_230_p2 = ((idxRow_reg_208 == 10'd768) ? 1'b1 : 1'b0);

assign exitcond_fu_242_p2 = ((idxCol_reg_219 == 11'd1024) ? 1'b1 : 1'b0);

assign grp_fu_301_p0 = grp_fu_301_p00;

assign grp_fu_301_p00 = tmp_10_reg_334;

assign grp_fu_301_p1 = 16'd76;

assign grp_fu_309_p0 = grp_fu_309_p00;

assign grp_fu_309_p00 = tmp_11_reg_339;

assign grp_fu_309_p1 = 16'd150;

assign idxCol_1_fu_248_p2 = (idxCol_reg_219 + 11'd1);

assign idxRow_1_fu_236_p2 = (idxRow_reg_208 + 10'd1);

assign imgOut_1C_data_stream_V_din = tmp_9_reg_350;

assign imgOut_3C_data_stream_0_V_din = tmp_9_reg_350;

assign imgOut_3C_data_stream_1_V_din = tmp_9_reg_350;

assign imgOut_3C_data_stream_2_V_din = tmp_9_reg_350;

assign p_shl1_cast_fu_278_p1 = p_shl1_fu_271_p3;

assign p_shl1_fu_271_p3 = {{tmp_7_reg_344}, {1'd0}};

assign p_shl_cast_fu_267_p1 = p_shl_fu_260_p3;

assign p_shl_fu_260_p3 = {{tmp_7_reg_344}, {5'd0}};

assign start_out = real_start;

assign tmp_6_fu_282_p2 = (p_shl_cast_fu_267_p1 - p_shl1_cast_fu_278_p1);

endmodule //rgb2gray
