-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity doCorner is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    inStream_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC );
end;


architecture behav of doCorner is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "doCorner,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.724000,HLS_SYN_LAT=2360837,HLS_SYN_TPT=2360834,HLS_SYN_MEM=61,HLS_SYN_DSP=2,HLS_SYN_FF=11538,HLS_SYN_LUT=10736,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_inStream_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal rgb2gray_U0_ap_start : STD_LOGIC;
    signal rgb2gray_U0_start_full_n : STD_LOGIC;
    signal rgb2gray_U0_ap_done : STD_LOGIC;
    signal rgb2gray_U0_ap_continue : STD_LOGIC;
    signal rgb2gray_U0_ap_idle : STD_LOGIC;
    signal rgb2gray_U0_ap_ready : STD_LOGIC;
    signal rgb2gray_U0_start_out : STD_LOGIC;
    signal rgb2gray_U0_start_write : STD_LOGIC;
    signal rgb2gray_U0_imgIn_data_stream_0_V_read : STD_LOGIC;
    signal rgb2gray_U0_imgIn_data_stream_1_V_read : STD_LOGIC;
    signal rgb2gray_U0_imgIn_data_stream_2_V_read : STD_LOGIC;
    signal rgb2gray_U0_imgOut_3C_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb2gray_U0_imgOut_3C_data_stream_0_V_write : STD_LOGIC;
    signal rgb2gray_U0_imgOut_3C_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb2gray_U0_imgOut_3C_data_stream_1_V_write : STD_LOGIC;
    signal rgb2gray_U0_imgOut_3C_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb2gray_U0_imgOut_3C_data_stream_2_V_write : STD_LOGIC;
    signal rgb2gray_U0_imgOut_1C_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb2gray_U0_imgOut_1C_data_stream_V_write : STD_LOGIC;
    signal FAST_t_opr_U0_ap_start : STD_LOGIC;
    signal FAST_t_opr_U0_ap_done : STD_LOGIC;
    signal FAST_t_opr_U0_ap_continue : STD_LOGIC;
    signal FAST_t_opr_U0_ap_idle : STD_LOGIC;
    signal FAST_t_opr_U0_ap_ready : STD_LOGIC;
    signal FAST_t_opr_U0_start_out : STD_LOGIC;
    signal FAST_t_opr_U0_start_write : STD_LOGIC;
    signal FAST_t_opr_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal FAST_t_opr_U0_p_mask_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal FAST_t_opr_U0_p_mask_data_stream_V_write : STD_LOGIC;
    signal Dilate_U0_ap_start : STD_LOGIC;
    signal Dilate_U0_ap_done : STD_LOGIC;
    signal Dilate_U0_ap_continue : STD_LOGIC;
    signal Dilate_U0_ap_idle : STD_LOGIC;
    signal Dilate_U0_ap_ready : STD_LOGIC;
    signal Dilate_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Dilate_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Dilate_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal PaintMask_U0_ap_start : STD_LOGIC;
    signal PaintMask_U0_ap_done : STD_LOGIC;
    signal PaintMask_U0_ap_continue : STD_LOGIC;
    signal PaintMask_U0_ap_idle : STD_LOGIC;
    signal PaintMask_U0_ap_ready : STD_LOGIC;
    signal PaintMask_U0_start_out : STD_LOGIC;
    signal PaintMask_U0_start_write : STD_LOGIC;
    signal PaintMask_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal PaintMask_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal PaintMask_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal PaintMask_U0_p_mask_data_stream_V_read : STD_LOGIC;
    signal PaintMask_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal PaintMask_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal PaintMask_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal PaintMask_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal PaintMask_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal PaintMask_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_outStream_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal Mat2AXIvideo_U0_outStream_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_outStream_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_outStream_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_outStream_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_outStream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_outStream_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_outStream_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal img_0_data_stream_0_full_n : STD_LOGIC;
    signal img_0_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_full_n : STD_LOGIC;
    signal img_0_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_full_n : STD_LOGIC;
    signal img_0_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_full_n : STD_LOGIC;
    signal img_1_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_empty_n : STD_LOGIC;
    signal img_1_data_stream_1_full_n : STD_LOGIC;
    signal img_1_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_empty_n : STD_LOGIC;
    signal img_1_data_stream_2_full_n : STD_LOGIC;
    signal img_1_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_2_empty_n : STD_LOGIC;
    signal img_2_data_stream_0_full_n : STD_LOGIC;
    signal img_2_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_empty_n : STD_LOGIC;
    signal mask_data_stream_0_s_full_n : STD_LOGIC;
    signal mask_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mask_data_stream_0_s_empty_n : STD_LOGIC;
    signal dmask_data_stream_0_full_n : STD_LOGIC;
    signal dmask_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dmask_data_stream_0_empty_n : STD_LOGIC;
    signal img_3_data_stream_0_full_n : STD_LOGIC;
    signal img_3_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_0_empty_n : STD_LOGIC;
    signal img_3_data_stream_1_full_n : STD_LOGIC;
    signal img_3_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_1_empty_n : STD_LOGIC;
    signal img_3_data_stream_2_full_n : STD_LOGIC;
    signal img_3_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_2_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_rgb2gray_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rgb2gray_U0_full_n : STD_LOGIC;
    signal start_for_rgb2gray_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rgb2gray_U0_empty_n : STD_LOGIC;
    signal start_for_FAST_t_opr_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FAST_t_opr_U0_full_n : STD_LOGIC;
    signal start_for_FAST_t_opr_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FAST_t_opr_U0_empty_n : STD_LOGIC;
    signal start_for_PaintMask_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PaintMask_U0_full_n : STD_LOGIC;
    signal start_for_PaintMask_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PaintMask_U0_empty_n : STD_LOGIC;
    signal start_for_Dilate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate_U0_full_n : STD_LOGIC;
    signal start_for_Dilate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate_U0_empty_n : STD_LOGIC;
    signal Dilate_U0_start_full_n : STD_LOGIC;
    signal Dilate_U0_start_write : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        inStream_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        inStream_TVALID : IN STD_LOGIC;
        inStream_TREADY : OUT STD_LOGIC;
        inStream_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        inStream_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        inStream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        inStream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        inStream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component rgb2gray IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        imgIn_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgIn_data_stream_0_V_empty_n : IN STD_LOGIC;
        imgIn_data_stream_0_V_read : OUT STD_LOGIC;
        imgIn_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgIn_data_stream_1_V_empty_n : IN STD_LOGIC;
        imgIn_data_stream_1_V_read : OUT STD_LOGIC;
        imgIn_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgIn_data_stream_2_V_empty_n : IN STD_LOGIC;
        imgIn_data_stream_2_V_read : OUT STD_LOGIC;
        imgOut_3C_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgOut_3C_data_stream_0_V_full_n : IN STD_LOGIC;
        imgOut_3C_data_stream_0_V_write : OUT STD_LOGIC;
        imgOut_3C_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgOut_3C_data_stream_1_V_full_n : IN STD_LOGIC;
        imgOut_3C_data_stream_1_V_write : OUT STD_LOGIC;
        imgOut_3C_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgOut_3C_data_stream_2_V_full_n : IN STD_LOGIC;
        imgOut_3C_data_stream_2_V_write : OUT STD_LOGIC;
        imgOut_1C_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgOut_1C_data_stream_V_full_n : IN STD_LOGIC;
        imgOut_1C_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component FAST_t_opr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_mask_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_mask_data_stream_V_full_n : IN STD_LOGIC;
        p_mask_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Dilate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component PaintMask IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_mask_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_mask_data_stream_V_empty_n : IN STD_LOGIC;
        p_mask_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        outStream_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        outStream_TVALID : OUT STD_LOGIC;
        outStream_TREADY : IN STD_LOGIC;
        outStream_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        outStream_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        outStream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        outStream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        outStream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d20000_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_rgb2grapcA IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_FAST_t_qcK IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_PaintMarcU IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Dilate_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIsc4 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component doCorner_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    doCorner_CTRL_BUS_s_axi_U : component doCorner_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        start_full_n => start_for_rgb2gray_U0_full_n,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        start_out => AXIvideo2Mat_U0_start_out,
        start_write => AXIvideo2Mat_U0_start_write,
        inStream_TDATA => inStream_TDATA,
        inStream_TVALID => inStream_TVALID,
        inStream_TREADY => AXIvideo2Mat_U0_inStream_TREADY,
        inStream_TKEEP => inStream_TKEEP,
        inStream_TSTRB => inStream_TSTRB,
        inStream_TUSER => inStream_TUSER,
        inStream_TLAST => inStream_TLAST,
        inStream_TID => inStream_TID,
        inStream_TDEST => inStream_TDEST,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_0_data_stream_0_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_0_data_stream_1_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img_0_data_stream_2_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write);

    rgb2gray_U0 : component rgb2gray
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rgb2gray_U0_ap_start,
        start_full_n => rgb2gray_U0_start_full_n,
        ap_done => rgb2gray_U0_ap_done,
        ap_continue => rgb2gray_U0_ap_continue,
        ap_idle => rgb2gray_U0_ap_idle,
        ap_ready => rgb2gray_U0_ap_ready,
        start_out => rgb2gray_U0_start_out,
        start_write => rgb2gray_U0_start_write,
        imgIn_data_stream_0_V_dout => img_0_data_stream_0_dout,
        imgIn_data_stream_0_V_empty_n => img_0_data_stream_0_empty_n,
        imgIn_data_stream_0_V_read => rgb2gray_U0_imgIn_data_stream_0_V_read,
        imgIn_data_stream_1_V_dout => img_0_data_stream_1_dout,
        imgIn_data_stream_1_V_empty_n => img_0_data_stream_1_empty_n,
        imgIn_data_stream_1_V_read => rgb2gray_U0_imgIn_data_stream_1_V_read,
        imgIn_data_stream_2_V_dout => img_0_data_stream_2_dout,
        imgIn_data_stream_2_V_empty_n => img_0_data_stream_2_empty_n,
        imgIn_data_stream_2_V_read => rgb2gray_U0_imgIn_data_stream_2_V_read,
        imgOut_3C_data_stream_0_V_din => rgb2gray_U0_imgOut_3C_data_stream_0_V_din,
        imgOut_3C_data_stream_0_V_full_n => img_1_data_stream_0_full_n,
        imgOut_3C_data_stream_0_V_write => rgb2gray_U0_imgOut_3C_data_stream_0_V_write,
        imgOut_3C_data_stream_1_V_din => rgb2gray_U0_imgOut_3C_data_stream_1_V_din,
        imgOut_3C_data_stream_1_V_full_n => img_1_data_stream_1_full_n,
        imgOut_3C_data_stream_1_V_write => rgb2gray_U0_imgOut_3C_data_stream_1_V_write,
        imgOut_3C_data_stream_2_V_din => rgb2gray_U0_imgOut_3C_data_stream_2_V_din,
        imgOut_3C_data_stream_2_V_full_n => img_1_data_stream_2_full_n,
        imgOut_3C_data_stream_2_V_write => rgb2gray_U0_imgOut_3C_data_stream_2_V_write,
        imgOut_1C_data_stream_V_din => rgb2gray_U0_imgOut_1C_data_stream_V_din,
        imgOut_1C_data_stream_V_full_n => img_2_data_stream_0_full_n,
        imgOut_1C_data_stream_V_write => rgb2gray_U0_imgOut_1C_data_stream_V_write);

    FAST_t_opr_U0 : component FAST_t_opr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => FAST_t_opr_U0_ap_start,
        start_full_n => start_for_Dilate_U0_full_n,
        ap_done => FAST_t_opr_U0_ap_done,
        ap_continue => FAST_t_opr_U0_ap_continue,
        ap_idle => FAST_t_opr_U0_ap_idle,
        ap_ready => FAST_t_opr_U0_ap_ready,
        start_out => FAST_t_opr_U0_start_out,
        start_write => FAST_t_opr_U0_start_write,
        p_src_data_stream_V_dout => img_2_data_stream_0_dout,
        p_src_data_stream_V_empty_n => img_2_data_stream_0_empty_n,
        p_src_data_stream_V_read => FAST_t_opr_U0_p_src_data_stream_V_read,
        p_mask_data_stream_V_din => FAST_t_opr_U0_p_mask_data_stream_V_din,
        p_mask_data_stream_V_full_n => mask_data_stream_0_s_full_n,
        p_mask_data_stream_V_write => FAST_t_opr_U0_p_mask_data_stream_V_write);

    Dilate_U0 : component Dilate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Dilate_U0_ap_start,
        ap_done => Dilate_U0_ap_done,
        ap_continue => Dilate_U0_ap_continue,
        ap_idle => Dilate_U0_ap_idle,
        ap_ready => Dilate_U0_ap_ready,
        p_src_data_stream_V_dout => mask_data_stream_0_s_dout,
        p_src_data_stream_V_empty_n => mask_data_stream_0_s_empty_n,
        p_src_data_stream_V_read => Dilate_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Dilate_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => dmask_data_stream_0_full_n,
        p_dst_data_stream_V_write => Dilate_U0_p_dst_data_stream_V_write);

    PaintMask_U0 : component PaintMask
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => PaintMask_U0_ap_start,
        start_full_n => start_for_Mat2AXIvideo_U0_full_n,
        ap_done => PaintMask_U0_ap_done,
        ap_continue => PaintMask_U0_ap_continue,
        ap_idle => PaintMask_U0_ap_idle,
        ap_ready => PaintMask_U0_ap_ready,
        start_out => PaintMask_U0_start_out,
        start_write => PaintMask_U0_start_write,
        p_src_data_stream_0_V_dout => img_1_data_stream_0_dout,
        p_src_data_stream_0_V_empty_n => img_1_data_stream_0_empty_n,
        p_src_data_stream_0_V_read => PaintMask_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img_1_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => img_1_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => PaintMask_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img_1_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => img_1_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => PaintMask_U0_p_src_data_stream_2_V_read,
        p_mask_data_stream_V_dout => dmask_data_stream_0_dout,
        p_mask_data_stream_V_empty_n => dmask_data_stream_0_empty_n,
        p_mask_data_stream_V_read => PaintMask_U0_p_mask_data_stream_V_read,
        p_dst_data_stream_0_V_din => PaintMask_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img_3_data_stream_0_full_n,
        p_dst_data_stream_0_V_write => PaintMask_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => PaintMask_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img_3_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => PaintMask_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => PaintMask_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img_3_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => PaintMask_U0_p_dst_data_stream_2_V_write);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_data_stream_0_V_dout => img_3_data_stream_0_dout,
        img_data_stream_0_V_empty_n => img_3_data_stream_0_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_3_data_stream_1_dout,
        img_data_stream_1_V_empty_n => img_3_data_stream_1_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_3_data_stream_2_dout,
        img_data_stream_2_V_empty_n => img_3_data_stream_2_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        outStream_TDATA => Mat2AXIvideo_U0_outStream_TDATA,
        outStream_TVALID => Mat2AXIvideo_U0_outStream_TVALID,
        outStream_TREADY => outStream_TREADY,
        outStream_TKEEP => Mat2AXIvideo_U0_outStream_TKEEP,
        outStream_TSTRB => Mat2AXIvideo_U0_outStream_TSTRB,
        outStream_TUSER => Mat2AXIvideo_U0_outStream_TUSER,
        outStream_TLAST => Mat2AXIvideo_U0_outStream_TLAST,
        outStream_TID => Mat2AXIvideo_U0_outStream_TID,
        outStream_TDEST => Mat2AXIvideo_U0_outStream_TDEST);

    img_0_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_dout,
        if_empty_n => img_0_data_stream_0_empty_n,
        if_read => rgb2gray_U0_imgIn_data_stream_0_V_read);

    img_0_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_dout,
        if_empty_n => img_0_data_stream_1_empty_n,
        if_read => rgb2gray_U0_imgIn_data_stream_1_V_read);

    img_0_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => img_0_data_stream_2_dout,
        if_empty_n => img_0_data_stream_2_empty_n,
        if_read => rgb2gray_U0_imgIn_data_stream_2_V_read);

    img_1_data_stream_0_U : component fifo_w8_d20000_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rgb2gray_U0_imgOut_3C_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_full_n,
        if_write => rgb2gray_U0_imgOut_3C_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_dout,
        if_empty_n => img_1_data_stream_0_empty_n,
        if_read => PaintMask_U0_p_src_data_stream_0_V_read);

    img_1_data_stream_1_U : component fifo_w8_d20000_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rgb2gray_U0_imgOut_3C_data_stream_1_V_din,
        if_full_n => img_1_data_stream_1_full_n,
        if_write => rgb2gray_U0_imgOut_3C_data_stream_1_V_write,
        if_dout => img_1_data_stream_1_dout,
        if_empty_n => img_1_data_stream_1_empty_n,
        if_read => PaintMask_U0_p_src_data_stream_1_V_read);

    img_1_data_stream_2_U : component fifo_w8_d20000_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rgb2gray_U0_imgOut_3C_data_stream_2_V_din,
        if_full_n => img_1_data_stream_2_full_n,
        if_write => rgb2gray_U0_imgOut_3C_data_stream_2_V_write,
        if_dout => img_1_data_stream_2_dout,
        if_empty_n => img_1_data_stream_2_empty_n,
        if_read => PaintMask_U0_p_src_data_stream_2_V_read);

    img_2_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rgb2gray_U0_imgOut_1C_data_stream_V_din,
        if_full_n => img_2_data_stream_0_full_n,
        if_write => rgb2gray_U0_imgOut_1C_data_stream_V_write,
        if_dout => img_2_data_stream_0_dout,
        if_empty_n => img_2_data_stream_0_empty_n,
        if_read => FAST_t_opr_U0_p_src_data_stream_V_read);

    mask_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FAST_t_opr_U0_p_mask_data_stream_V_din,
        if_full_n => mask_data_stream_0_s_full_n,
        if_write => FAST_t_opr_U0_p_mask_data_stream_V_write,
        if_dout => mask_data_stream_0_s_dout,
        if_empty_n => mask_data_stream_0_s_empty_n,
        if_read => Dilate_U0_p_src_data_stream_V_read);

    dmask_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Dilate_U0_p_dst_data_stream_V_din,
        if_full_n => dmask_data_stream_0_full_n,
        if_write => Dilate_U0_p_dst_data_stream_V_write,
        if_dout => dmask_data_stream_0_dout,
        if_empty_n => dmask_data_stream_0_empty_n,
        if_read => PaintMask_U0_p_mask_data_stream_V_read);

    img_3_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PaintMask_U0_p_dst_data_stream_0_V_din,
        if_full_n => img_3_data_stream_0_full_n,
        if_write => PaintMask_U0_p_dst_data_stream_0_V_write,
        if_dout => img_3_data_stream_0_dout,
        if_empty_n => img_3_data_stream_0_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    img_3_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PaintMask_U0_p_dst_data_stream_1_V_din,
        if_full_n => img_3_data_stream_1_full_n,
        if_write => PaintMask_U0_p_dst_data_stream_1_V_write,
        if_dout => img_3_data_stream_1_dout,
        if_empty_n => img_3_data_stream_1_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    img_3_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => PaintMask_U0_p_dst_data_stream_2_V_din,
        if_full_n => img_3_data_stream_2_full_n,
        if_write => PaintMask_U0_p_dst_data_stream_2_V_write,
        if_dout => img_3_data_stream_2_dout,
        if_empty_n => img_3_data_stream_2_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    start_for_rgb2grapcA_U : component start_for_rgb2grapcA
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_rgb2gray_U0_din,
        if_full_n => start_for_rgb2gray_U0_full_n,
        if_write => AXIvideo2Mat_U0_start_write,
        if_dout => start_for_rgb2gray_U0_dout,
        if_empty_n => start_for_rgb2gray_U0_empty_n,
        if_read => rgb2gray_U0_ap_ready);

    start_for_FAST_t_qcK_U : component start_for_FAST_t_qcK
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_FAST_t_opr_U0_din,
        if_full_n => start_for_FAST_t_opr_U0_full_n,
        if_write => rgb2gray_U0_start_write,
        if_dout => start_for_FAST_t_opr_U0_dout,
        if_empty_n => start_for_FAST_t_opr_U0_empty_n,
        if_read => FAST_t_opr_U0_ap_ready);

    start_for_PaintMarcU_U : component start_for_PaintMarcU
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_PaintMask_U0_din,
        if_full_n => start_for_PaintMask_U0_full_n,
        if_write => rgb2gray_U0_start_write,
        if_dout => start_for_PaintMask_U0_dout,
        if_empty_n => start_for_PaintMask_U0_empty_n,
        if_read => PaintMask_U0_ap_ready);

    start_for_Dilate_U0_U : component start_for_Dilate_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Dilate_U0_din,
        if_full_n => start_for_Dilate_U0_full_n,
        if_write => FAST_t_opr_U0_start_write,
        if_dout => start_for_Dilate_U0_dout,
        if_empty_n => start_for_Dilate_U0_empty_n,
        if_read => Dilate_U0_ap_ready);

    start_for_Mat2AXIsc4_U : component start_for_Mat2AXIsc4
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => PaintMask_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);




    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ap_start;
    Dilate_U0_ap_continue <= ap_const_logic_1;
    Dilate_U0_ap_start <= start_for_Dilate_U0_empty_n;
    Dilate_U0_start_full_n <= ap_const_logic_1;
    Dilate_U0_start_write <= ap_const_logic_0;
    FAST_t_opr_U0_ap_continue <= ap_const_logic_1;
    FAST_t_opr_U0_ap_start <= start_for_FAST_t_opr_U0_empty_n;
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    PaintMask_U0_ap_continue <= ap_const_logic_1;
    PaintMask_U0_ap_start <= start_for_PaintMask_U0_empty_n;
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_idle <= (rgb2gray_U0_ap_idle and PaintMask_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and FAST_t_opr_U0_ap_idle and Dilate_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= AXIvideo2Mat_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIvideo_U0_ap_done;
    ap_sync_ready <= AXIvideo2Mat_U0_ap_ready;
    inStream_TREADY <= AXIvideo2Mat_U0_inStream_TREADY;
    outStream_TDATA <= Mat2AXIvideo_U0_outStream_TDATA;
    outStream_TDEST <= Mat2AXIvideo_U0_outStream_TDEST;
    outStream_TID <= Mat2AXIvideo_U0_outStream_TID;
    outStream_TKEEP <= Mat2AXIvideo_U0_outStream_TKEEP;
    outStream_TLAST <= Mat2AXIvideo_U0_outStream_TLAST;
    outStream_TSTRB <= Mat2AXIvideo_U0_outStream_TSTRB;
    outStream_TUSER <= Mat2AXIvideo_U0_outStream_TUSER;
    outStream_TVALID <= Mat2AXIvideo_U0_outStream_TVALID;
    rgb2gray_U0_ap_continue <= ap_const_logic_1;
    rgb2gray_U0_ap_start <= start_for_rgb2gray_U0_empty_n;
    rgb2gray_U0_start_full_n <= (start_for_PaintMask_U0_full_n and start_for_FAST_t_opr_U0_full_n);
    start_for_Dilate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_FAST_t_opr_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_PaintMask_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_rgb2gray_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
